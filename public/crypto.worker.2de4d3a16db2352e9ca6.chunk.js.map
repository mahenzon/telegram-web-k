{"version":3,"file":"crypto.worker.2de4d3a16db2352e9ca6.chunk.js","mappings":"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","sources":["webpack://tweb/webpack/runtime/chunk loaded","webpack://tweb/webpack/runtime/compat","webpack://tweb/webpack/runtime/startup chunk dependencies","webpack://tweb/./src/environment/userAgent.ts","webpack://tweb/./src/helpers/context.ts","webpack://tweb/./src/helpers/bytes/bufferConcats.ts","webpack://tweb/./src/lib/polyfill.ts","webpack://tweb/./src/helpers/bigInt/bigIntConstants.ts","webpack://tweb/./src/helpers/bigInt/bigIntConversion.ts","webpack://tweb/./src/helpers/bytes/bytesModPow.ts","webpack://tweb/./src/lib/crypto/cryptoMessagePort.ts","webpack://tweb/./src/lib/calls/helpers/getEmojisFingerprint.ts","webpack://tweb/./src/helpers/array/randomize.ts","webpack://tweb/./src/helpers/bytes/addPadding.ts","webpack://tweb/./src/helpers/bytes/bytesFromHex.ts","webpack://tweb/./src/helpers/bytes/convertToUint8Array.ts","webpack://tweb/./node_modules/@cryptography/aes/dist/es/aes.js","webpack://tweb/./src/helpers/bytes/bytesToWordss.ts","webpack://tweb/./src/lib/crypto/utils/aesIGE.ts","webpack://tweb/./src/helpers/bytes/bytesFromWordss.ts","webpack://tweb/./src/helpers/random.ts","webpack://tweb/./src/helpers/bigInt/bigIntRandom.ts","webpack://tweb/./src/lib/crypto/utils/factorize/BrentPollard.ts","webpack://tweb/./src/lib/crypto/subtle.ts","webpack://tweb/./src/lib/crypto/utils/aesCTR.ts","webpack://tweb/./src/lib/crypto/aesCtrUtils.ts","webpack://tweb/./src/lib/crypto/crypto.worker.ts","webpack://tweb/./src/lib/crypto/utils/sha1.ts","webpack://tweb/./src/lib/crypto/utils/sha256.ts","webpack://tweb/./src/lib/crypto/utils/pbkdf2.ts","webpack://tweb/./src/lib/crypto/utils/rsa.ts","webpack://tweb/./src/helpers/gzipUncompress.ts","webpack://tweb/./src/lib/crypto/srp.ts","webpack://tweb/./src/helpers/bytes/bytesToHex.ts","webpack://tweb/./src/helpers/bytes/bytesXor.ts","webpack://tweb/./src/lib/crypto/generateDh.ts","webpack://tweb/./src/lib/crypto/computeDhKey.ts","webpack://tweb/./src/helpers/listenMessagePort.ts","webpack://tweb/./src/lib/logger.ts","webpack://tweb/webpack/bootstrap","webpack://tweb/webpack/runtime/compat get default export","webpack://tweb/webpack/runtime/define property getters","webpack://tweb/webpack/runtime/ensure chunk","webpack://tweb/webpack/runtime/get javascript chunk filename","webpack://tweb/webpack/runtime/get mini-css chunk filename","webpack://tweb/webpack/runtime/global","webpack://tweb/webpack/runtime/hasOwnProperty shorthand","webpack://tweb/webpack/runtime/node module decorator","webpack://tweb/webpack/runtime/publicPath","webpack://tweb/webpack/runtime/importScripts chunk loading","webpack://tweb/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","(() => {\n  if (typeof __webpack_require__ !== 'undefined') {\n    var oldGetScript = __webpack_require__.u;\n    var oldLoadScript = __webpack_require__.e;\n    var queryMap = new Map();\n    var countMap = new Map();\n    __webpack_require__.u = function (chunkId) {\n      var result = oldGetScript(chunkId);\n      return (\n        result + (queryMap.has(chunkId) ? '?' + queryMap.get(chunkId) : '')\n      );\n    };\n    __webpack_require__.e = function (chunkId) {\n      var result = oldLoadScript(chunkId);\n      return result.catch(function (error) {\n        var retries = countMap.has(chunkId) ? countMap.get(chunkId) : 999999;\n        if (retries < 1) {\n          var realSrc = oldGetScript(chunkId);\n          error.message =\n            'Loading chunk ' +\n            chunkId +\n            ' failed after 999999 retries.\\n(' +\n            realSrc +\n            ')';\n          error.request = realSrc;\n          throw error;\n        }\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            var retryAttempt = 999999 - retries + 1;\n            var retryAttemptString = '&retry-attempt=' + retryAttempt;\n            var cacheBust = (function () {\n              return Date.now();\n            })();\n            +retryAttemptString;\n            queryMap.set(chunkId, cacheBust);\n            countMap.set(chunkId, retries - 1);\n            resolve(__webpack_require__.e(chunkId));\n          }, 3000);\n        });\n      });\n    };\n  }\n})();\n","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([699,211,437].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport ctx from './ctx';\r\n\r\nexport const USER_AGENT = navigator ? navigator.userAgent : null;\r\nexport const IS_APPLE = navigator.userAgent.search(/OS X|iPhone|iPad|iOS/i) !== -1;\r\nexport const IS_ANDROID = navigator.userAgent.toLowerCase().indexOf('android') !== -1;\r\nexport const IS_CHROMIUM = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\r\n\r\n// https://stackoverflow.com/a/58065241\r\nexport const IS_APPLE_MOBILE = (/iPad|iPhone|iPod/.test(navigator.platform) ||\r\n  (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&\r\n  !(ctx as any).MSStream;\r\n\r\nexport const IS_SAFARI = !!('safari' in ctx) || !!(USER_AGENT && (/\\b(iPad|iPhone|iPod)\\b/.test(USER_AGENT) || (!!USER_AGENT.match('Safari') && !USER_AGENT.match('Chrome'))))/*  || true */;\r\nexport const IS_FIREFOX = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n\r\nexport const IS_MOBILE_SAFARI = IS_SAFARI && IS_APPLE_MOBILE;\r\n\r\nexport const IS_MOBILE = /* screen.width && screen.width < 480 ||  */navigator.maxTouchPoints > 0 && navigator.userAgent.search(/iOS|iPhone OS|Android|BlackBerry|BB10|Series ?[64]0|J2ME|MIDP|opera mini|opera mobi|mobi.+Gecko|Windows Phone/i) != -1;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// в SW может быть сразу две переменных TRUE\r\nexport const IS_SERVICE_WORKER = typeof ServiceWorkerGlobalScope !== 'undefined' && self instanceof ServiceWorkerGlobalScope;\r\nexport const IS_WEB_WORKER = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && !IS_SERVICE_WORKER;\r\nexport const IS_WORKER = IS_WEB_WORKER || IS_SERVICE_WORKER;\r\n\r\nexport const getWindowClients = () => {\r\n  return (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({includeUncontrolled: false, type: 'window'});\r\n};\r\n\r\nexport const getLastWindowClient = () => getWindowClients().then((windowClients) => windowClients.slice(-1)[0]);\r\n\r\nconst postMessage = (listener: WindowClient | DedicatedWorkerGlobalScope, ...args: any[]) => {\r\n  try {\r\n    // @ts-ignore\r\n    listener.postMessage(...args);\r\n  } catch(err) {\r\n    console.error('[worker] postMessage error:', err, args);\r\n  }\r\n};\r\n\r\nconst notifyServiceWorker = (all: boolean, ...args: any[]) => {\r\n  getWindowClients().then((listeners) => {\r\n    if(!listeners.length) {\r\n      // console.trace('no listeners?', self, listeners);\r\n      return;\r\n    }\r\n\r\n    listeners.slice(all ? 0 : -1).forEach((listener) => {\r\n      postMessage(listener, ...args);\r\n    });\r\n  });\r\n};\r\n\r\nconst notifyWorker = (...args: any[]) => {\r\n  postMessage(self as any as DedicatedWorkerGlobalScope, ...args);\r\n};\r\n\r\nconst noop = () => {};\r\n\r\nexport const notifySomeone = IS_SERVICE_WORKER ? notifyServiceWorker.bind(null, false) : (IS_WEB_WORKER ? notifyWorker : noop);\r\nexport const notifyAll = IS_SERVICE_WORKER ? notifyServiceWorker.bind(null, true) : (IS_WEB_WORKER ? notifyWorker : noop);\r\n","export default function bufferConcats(...args: (ArrayBuffer | Uint8Array | number[])[]) {\n  const length = args.reduce((acc, v) => acc + ((v as ArrayBuffer).byteLength || (v as Uint8Array).length), 0);\n\n  const tmp = new Uint8Array(length);\n\n  let lastLength = 0;\n  args.forEach((b) => {\n    tmp.set(b instanceof ArrayBuffer ? new Uint8Array(b) : b, lastLength);\n    lastLength += (b as ArrayBuffer).byteLength || (b as Uint8Array).length;\n  });\n\n  return tmp/* .buffer */;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport bufferConcats from '../helpers/bytes/bufferConcats';\n\nUint8Array.prototype.concat = function(...args: Array<Uint8Array | ArrayBuffer | number[]>) {\n  return bufferConcats(this, ...args);\n};\n\n/* Uint8Array.prototype.toString = function() {\n  return String.fromCharCode.apply(null, [...this]);\n}; */\n\nUint8Array.prototype.toJSON = function() {\n  return [...this];\n  // return {type: 'bytes', value: [...this]};\n};\n\nPromise.prototype.finally = Promise.prototype.finally || function<T>(this: Promise<T>, fn: () => any) {\n  const onFinally = (callback: typeof fn) => Promise.resolve(fn()).then(callback);\n  return this.then(\n    result => onFinally(() => result),\n    reason => onFinally(() => Promise.reject(reason))\n  );\n};\n\ndeclare global {\n  interface Uint8Array {\n    concat: (...args: Array<Uint8Array | ArrayBuffer | number[]>) => Uint8Array,\n    // toString: () => string,\n    toJSON: () => number[],\n    // toJSON: () => {type: 'bytes', value: number[]},\n  }\n\n  interface Promise<T> {\n    finally: (onfinally?: () => void) => Promise<T>;\n  }\n}\n","import bigInt from 'big-integer';\n\nexport const safeBigInt = bigInt(Number.MAX_SAFE_INTEGER);\nexport const ulongBigInt = bigInt(bigInt[2]).pow(64);\nexport const longBigInt = ulongBigInt.divide(bigInt[2]);\n","import bigInt from 'big-integer';\nimport { longBigInt, ulongBigInt } from './bigIntConstants';\n\nexport function bigIntFromBytes(bytes: Uint8Array | number[], base = 256) {\n  return bigInt.fromArray(bytes instanceof Uint8Array ? [...bytes] : bytes, base);\n}\n\nexport function bigIntToBytes(bigInt: bigInt.BigInteger) {\n  return new Uint8Array(bigInt.toArray(256).value);\n}\n\nexport function bigIntToSigned(bigInt: bigInt.BigInteger) {\n  return bigInt.greater(longBigInt) ? bigInt.minus(ulongBigInt) : bigInt;\n}\n\nexport function bigIntToUnsigned(bigInt: bigInt.BigInteger) {\n  return bigInt.isNegative() ? ulongBigInt.add(bigInt) : bigInt;\n}\n","import {bigIntFromBytes, bigIntToBytes} from '../bigInt/bigIntConversion';\n\nexport default function bytesModPow(bytes: number[] | Uint8Array, exp: number[] | Uint8Array, mod: number[] | Uint8Array) {\n  const bytesBigInt = bigIntFromBytes(bytes);\n  const expBigInt = bigIntFromBytes(exp);\n  const modBigInt = bigIntFromBytes(mod);\n  const resBigInt = bytesBigInt.modPow(expBigInt, modBigInt);\n  return bigIntToBytes(resBigInt);\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport {CryptoMethods} from './crypto_methods';\r\nimport SuperMessagePort from '../mtproto/superMessagePort';\r\nimport {Awaited} from '../../types';\r\nimport {MOUNT_CLASS_TO} from '../../config/debug';\r\nimport {IS_WORKER} from '../../helpers/context';\r\n\r\ntype CryptoEvent = {\r\n  invoke: <T extends keyof CryptoMethods>(payload: {method: T, args: Parameters<CryptoMethods[T]>}) => ReturnType<CryptoMethods[T]>,\r\n  port: (payload: void, source: MessageEventSource, event: MessageEvent) => void,\r\n  terminate: () => void\r\n};\r\n\r\nexport class CryptoMessagePort<Master extends boolean = false> extends SuperMessagePort<CryptoEvent, CryptoEvent, Master> {\r\n  private lastIndex: number;\r\n\r\n  constructor() {\r\n    super('CRYPTO');\r\n    this.lastIndex = -1;\r\n  }\r\n\r\n  public invokeCryptoNew<T extends keyof CryptoMethods>({method, args, transfer}: {\r\n    method: T,\r\n    args: Parameters<CryptoMethods[T]>,\r\n    transfer?: Transferable[]\r\n  }): Promise<Awaited<ReturnType<CryptoMethods[T]>>> {\r\n    const payload = {method, args};\r\n    const listeners = this.listeners['invoke'];\r\n    if(listeners?.length) { // already in worker\r\n      // try {\r\n      // @ts-ignore\r\n      let result: any = listeners[0].callback(payload);\r\n      if(!IS_WORKER && !(result instanceof Promise)) {\r\n        result = Promise.resolve(result);\r\n      }\r\n\r\n      return result;\r\n      // } catch(err) {\r\n      //   return Promise.reject(err);\r\n      // }\r\n    }\r\n\r\n    const sendPortIndex = method === 'aes-encrypt' || method === 'aes-decrypt' ?\r\n      this.lastIndex = (this.lastIndex + 1) % this.sendPorts.length :\r\n      0;\r\n    // @ts-ignore\r\n    return this.invoke('invoke', payload, undefined, this.sendPorts[sendPortIndex], transfer);\r\n  }\r\n\r\n  public invokeCrypto<T extends keyof CryptoMethods>(method: T, ...args: Parameters<CryptoMethods[T]>): Promise<Awaited<ReturnType<CryptoMethods[T]>>> {\r\n    return this.invokeCryptoNew({method, args});\r\n  }\r\n}\r\n\r\nconst cryptoMessagePort = new CryptoMessagePort<false>();\r\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.cryptoMessagePort = cryptoMessagePort);\r\nexport default cryptoMessagePort;\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport cryptoWorker from '../../crypto/cryptoMessagePort';\nimport bigInt from 'big-integer';\n\nfunction readBigIntFromBytesBE(bytes: Uint8Array) {\n  const length = bytes.length;\n  const bits = length * 8;\n  let value = bigInt(bytes[0]).and(0x7F).shiftLeft(bits - 8);\n  for(let i = 1; i < length; ++i) {\n    const _bits = bits - (i + 1) * 8;\n    const b = bigInt(bytes[i]);\n    value = value.or(_bits ? b.shiftLeft(_bits) : b);\n  }\n\n  return value;\n}\n\n// Emojis were taken from tdlib\nconst emojis = [\n  '1f609', '1f60d', '1f61b', '1f62d', '1f631', '1f621', '1f60e',\n  '1f634', '1f635', '1f608', '1f62c', '1f607', '1f60f', '1f46e',\n  '1f477', '1f482', '1f476', '1f468', '1f469', '1f474', '1f475',\n  '1f63b', '1f63d', '1f640', '1f47a', '1f648', '1f649', '1f64a',\n  '1f480', '1f47d', '1f4a9', '1f525', '1f4a5', '1f4a4', '1f442',\n  '1f440', '1f443', '1f445', '1f444', '1f44d', '1f44e', '1f44c',\n  '1f44a', '270c', '270b', '1f450', '1f446', '1f447', '1f449',\n  '1f448', '1f64f', '1f44f', '1f4aa', '1f6b6', '1f3c3', '1f483',\n  '1f46b', '1f46a', '1f46c', '1f46d', '1f485', '1f3a9', '1f451',\n  '1f452', '1f45f', '1f45e', '1f460', '1f455', '1f457', '1f456',\n  '1f459', '1f45c', '1f453', '1f380', '1f484', '1f49b', '1f499',\n  '1f49c', '1f49a', '1f48d', '1f48e', '1f436', '1f43a', '1f431',\n  '1f42d', '1f439', '1f430', '1f438', '1f42f', '1f428', '1f43b',\n  '1f437', '1f42e', '1f417', '1f434', '1f411', '1f418', '1f43c',\n  '1f427', '1f425', '1f414', '1f40d', '1f422', '1f41b', '1f41d',\n  '1f41c', '1f41e', '1f40c', '1f419', '1f41a', '1f41f', '1f42c',\n  '1f40b', '1f410', '1f40a', '1f42b', '1f340', '1f339', '1f33b',\n  '1f341', '1f33e', '1f344', '1f335', '1f334', '1f333', '1f31e',\n  '1f31a', '1f319', '1f30e', '1f30b', '26a1', '2614', '2744', '26c4',\n  '1f300', '1f308', '1f30a', '1f393', '1f386', '1f383', '1f47b',\n  '1f385', '1f384', '1f381', '1f388', '1f52e', '1f3a5', '1f4f7',\n  '1f4bf', '1f4bb', '260e', '1f4e1', '1f4fa', '1f4fb', '1f509',\n  '1f514', '23f3', '23f0', '231a', '1f512', '1f511', '1f50e',\n  '1f4a1', '1f526', '1f50c', '1f50b', '1f6bf', '1f6bd', '1f527',\n  '1f528', '1f6aa', '1f6ac', '1f4a3', '1f52b', '1f52a', '1f48a',\n  '1f489', '1f4b0', '1f4b5', '1f4b3', '2709', '1f4eb', '1f4e6',\n  '1f4c5', '1f4c1', '2702', '1f4cc', '1f4ce', '2712', '270f',\n  '1f4d0', '1f4da', '1f52c', '1f52d', '1f3a8', '1f3ac', '1f3a4',\n  '1f3a7', '1f3b5', '1f3b9', '1f3bb', '1f3ba', '1f3b8', '1f47e',\n  '1f3ae', '1f0cf', '1f3b2', '1f3af', '1f3c8', '1f3c0', '26bd',\n  '26be', '1f3be', '1f3b1', '1f3c9', '1f3b3', '1f3c1', '1f3c7',\n  '1f3c6', '1f3ca', '1f3c4', '2615', '1f37c', '1f37a', '1f377',\n  '1f374', '1f355', '1f354', '1f35f', '1f357', '1f371', '1f35a',\n  '1f35c', '1f361', '1f373', '1f35e', '1f369', '1f366', '1f382',\n  '1f370', '1f36a', '1f36b', '1f36d', '1f36f', '1f34e', '1f34f',\n  '1f34a', '1f34b', '1f352', '1f347', '1f349', '1f353', '1f351',\n  '1f34c', '1f350', '1f34d', '1f346', '1f345', '1f33d', '1f3e1',\n  '1f3e5', '1f3e6', '26ea', '1f3f0', '26fa', '1f3ed', '1f5fb',\n  '1f5fd', '1f3a0', '1f3a1', '26f2', '1f3a2', '1f6a2', '1f6a4',\n  '2693', '1f680', '2708', '1f681', '1f682', '1f68b', '1f68e',\n  '1f68c', '1f699', '1f697', '1f695', '1f69b', '1f6a8', '1f694',\n  '1f692', '1f691', '1f6b2', '1f6a0', '1f69c', '1f6a6', '26a0',\n  '1f6a7', '26fd', '1f3b0', '1f5ff', '1f3aa', '1f3ad',\n  '1f1ef-1f1f5', '1f1f0-1f1f7', '1f1e9-1f1ea', '1f1e8-1f1f3',\n  '1f1fa-1f1f8', '1f1eb-1f1f7', '1f1ea-1f1f8', '1f1ee-1f1f9',\n  '1f1f7-1f1fa', '1f1ec-1f1e7', '0031-20e3', '0032-20e3', '0033-20e3',\n  '0034-20e3', '0035-20e3', '0036-20e3', '0037-20e3', '0038-20e3', '0039-20e3',\n  '0030-20e3', '1f51f', '2757', '2753', '2665', '2666', '1f4af', '1f517',\n  '1f531', '1f534', '1f535', '1f536', '1f537'\n];\n\nexport default async function getEmojisFingerprint(key: Uint8Array, g_a: Uint8Array) {\n  const arr = key.concat(g_a);\n  const hash = await cryptoWorker.invokeCrypto('sha256', arr);\n\n  const result: [string, string, string, string] = [] as any;\n  const emojisLength = emojis.length;\n\n  const kPartSize = 8;\n  for(let partOffset = 0; partOffset != hash.length; partOffset += kPartSize) {\n    const bytes = hash.slice(partOffset, partOffset + kPartSize);\n    const value = readBigIntFromBytesBE(bytes);\n    const index = value.mod(emojisLength).toJSNumber();\n\n    // const emoji = emojiFromCodePoints(emojis[index]);\n    const codePoints = emojis[index];\n    result.push(codePoints);\n  }\n\n  return result;\n}\n","export default function randomize<T extends ArrayBufferView>(arr: T) {\n  if(crypto && 'getRandomValues' in crypto) {\n    crypto.getRandomValues(arr);\n  } else {\n    throw new Error('NO_SECURE_RANDOM');\n  }\n\n  return arr;\n}\n","import randomize from '../array/randomize';\nimport bufferConcats from './bufferConcats';\n\nexport default function addPadding<T extends number[] | ArrayBuffer | Uint8Array>(\n  bytes: T,\n  blockSize: number = 16,\n  zeroes?: boolean,\n  blockSizeAsTotalLength = false,\n  prepend = false\n): T {\n  const len = (bytes as ArrayBuffer).byteLength || (bytes as Uint8Array).length;\n  const needPadding = blockSizeAsTotalLength ? blockSize - len : blockSize - (len % blockSize);\n  if(needPadding > 0 && needPadding < blockSize) {\n    // //console.log('addPadding()', len, blockSize, needPadding);\n    const padding = new Uint8Array(needPadding);\n    if(zeroes) {\n      for(let i = 0; i < needPadding; ++i) {\n        padding[i] = 0;\n      }\n    } else {\n      randomize(padding);\n    }\n\n    if(bytes instanceof ArrayBuffer) {\n      return (prepend ? bufferConcats(padding, bytes) : bufferConcats(bytes, padding)).buffer as T;\n    } else if(bytes instanceof Uint8Array) {\n      return (prepend ? bufferConcats(padding, bytes) : bufferConcats(bytes, padding)) as T;\n    } else {\n      // @ts-ignore\n      return (prepend ? [...padding].concat(bytes) : bytes.concat([...padding])) as T;\n    }\n  }\n\n  return bytes;\n}\n","export default function bytesFromHex(hexString: string) {\n  const len = hexString.length;\n  const bytes = new Uint8Array(Math.ceil(len / 2));\n  let start = 0;\n\n  if(len % 2) { // read 0x581 as 0x0581\n    bytes[start++] = parseInt(hexString.charAt(0), 16);\n  }\n\n  for(let i = start; i < len; i += 2) {\n    bytes[start++] = parseInt(hexString.substr(i, 2), 16);\n  }\n\n  return bytes;\n}\n","export default function convertToUint8Array(bytes: Uint8Array | ArrayBuffer | number[] | string): Uint8Array {\n  if(bytes instanceof Uint8Array) {\n    return bytes;\n  } else if(typeof(bytes) === 'string') {\n    return new TextEncoder().encode(bytes);\n  }\n\n  return new Uint8Array(bytes);\n}\n","var S = new Uint8Array(256);\nvar Si = new Uint8Array(256);\nvar T1 = new Uint32Array(256);\nvar T2 = new Uint32Array(256);\nvar T3 = new Uint32Array(256);\nvar T4 = new Uint32Array(256);\nvar T5 = new Uint32Array(256);\nvar T6 = new Uint32Array(256);\nvar T7 = new Uint32Array(256);\nvar T8 = new Uint32Array(256);\nfunction computeTables() {\n    var d = new Uint8Array(256);\n    var t = new Uint8Array(256);\n    var x2;\n    var x4;\n    var x8;\n    var s;\n    var tEnc;\n    var tDec;\n    var x = 0;\n    var xInv = 0;\n    // Compute double and third tables\n    for (var i = 0; i < 256; i++) {\n        d[i] = i << 1 ^ (i >> 7) * 283;\n        t[d[i] ^ i] = i;\n    }\n    for (; !S[x]; x ^= x2 || 1) {\n        // Compute sbox\n        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n        s = s >> 8 ^ s & 255 ^ 99;\n        S[x] = s;\n        Si[s] = x;\n        // Compute MixColumns\n        x8 = d[x4 = d[x2 = d[x]]];\n        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n        tEnc = d[s] * 0x101 ^ s * 0x1010100;\n        T1[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T2[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T3[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T4[x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        T5[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        T6[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        T7[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        T8[s] = tDec = tDec << 24 ^ tDec >>> 8;\n        xInv = t[xInv] || 1;\n    }\n}\n\n/**\n * Gets a uint32 from string in big-endian order order\n */\nfunction s2i(str, pos) {\n    return (str.charCodeAt(pos) << 24\n        ^ str.charCodeAt(pos + 1) << 16\n        ^ str.charCodeAt(pos + 2) << 8\n        ^ str.charCodeAt(pos + 3));\n}\n\n/* eslint-disable import/prefer-default-export */\n/**\n * Helper function for transforming string key to Uint32Array\n */\nfunction getWords(key) {\n    if (key instanceof Uint32Array) {\n        return key;\n    }\n    if (typeof key === 'string') {\n        if (key.length % 4 !== 0)\n            for (var i = key.length % 4; i <= 4; i++)\n                key += '\\0x00';\n        var buf = new Uint32Array(key.length / 4);\n        for (var i = 0; i < key.length; i += 4)\n            buf[i / 4] = s2i(key, i);\n        return buf;\n    }\n    if (key instanceof Uint8Array) {\n        var buf = new Uint32Array(key.length / 4);\n        for (var i = 0; i < key.length; i += 4) {\n            buf[i / 4] = (key[i] << 24\n                ^ key[i + 1] << 16\n                ^ key[i + 2] << 8\n                ^ key[i + 3]);\n        }\n        return buf;\n    }\n    throw new Error('Unable to create 32-bit words');\n}\nfunction xor(left, right, to) {\n    if (to === void 0) { to = left; }\n    for (var i = 0; i < left.length; i++)\n        to[i] = left[i] ^ right[i];\n}\n\ncomputeTables();\n/**\n * Low-level AES Cipher\n */\nvar AES = /** @class */ (function () {\n    function AES(_key) {\n        var key = getWords(_key);\n        if (key.length !== 4 && key.length !== 6 && key.length !== 8) {\n            throw new Error('Invalid key size');\n        }\n        this.encKey = new Uint32Array(4 * key.length + 28);\n        this.decKey = new Uint32Array(4 * key.length + 28);\n        this.encKey.set(key);\n        var rcon = 1;\n        var i = key.length;\n        var tmp;\n        // schedule encryption keys\n        for (; i < 4 * key.length + 28; i++) {\n            tmp = this.encKey[i - 1];\n            // apply sbox\n            if (i % key.length === 0 || (key.length === 8 && i % key.length === 4)) {\n                tmp = S[tmp >>> 24] << 24 ^ S[(tmp >> 16) & 255] << 16 ^ S[(tmp >> 8) & 255] << 8 ^ S[tmp & 255];\n                // shift rows and add rcon\n                if (i % key.length === 0) {\n                    tmp = tmp << 8 ^ tmp >>> 24 ^ (rcon << 24);\n                    rcon = rcon << 1 ^ (rcon >> 7) * 283;\n                }\n            }\n            this.encKey[i] = this.encKey[i - key.length] ^ tmp;\n        }\n        // schedule decryption keys\n        for (var j = 0; i; j++, i--) {\n            tmp = this.encKey[j & 3 ? i : i - 4];\n            if (i <= 4 || j < 4) {\n                this.decKey[j] = tmp;\n            }\n            else {\n                this.decKey[j] = (T5[S[tmp >>> 24]]\n                    ^ T6[S[(tmp >> 16) & 255]]\n                    ^ T7[S[(tmp >> 8) & 255]]\n                    ^ T8[S[tmp & 255]]);\n            }\n        }\n    }\n    AES.prototype.encrypt = function (_message) {\n        var message = getWords(_message);\n        var out = new Uint32Array(4);\n        var a = message[0] ^ this.encKey[0];\n        var b = message[1] ^ this.encKey[1];\n        var c = message[2] ^ this.encKey[2];\n        var d = message[3] ^ this.encKey[3];\n        var rounds = this.encKey.length / 4 - 2;\n        var k = 4;\n        var a2;\n        var b2;\n        var c2;\n        // Inner rounds.  Cribbed from OpenSSL.\n        for (var i = 0; i < rounds; i++) {\n            a2 = T1[a >>> 24] ^ T2[(b >> 16) & 255] ^ T3[(c >> 8) & 255] ^ T4[d & 255] ^ this.encKey[k];\n            b2 = T1[b >>> 24] ^ T2[(c >> 16) & 255] ^ T3[(d >> 8) & 255] ^ T4[a & 255] ^ this.encKey[k + 1];\n            c2 = T1[c >>> 24] ^ T2[(d >> 16) & 255] ^ T3[(a >> 8) & 255] ^ T4[b & 255] ^ this.encKey[k + 2];\n            d = T1[d >>> 24] ^ T2[(a >> 16) & 255] ^ T3[(b >> 8) & 255] ^ T4[c & 255] ^ this.encKey[k + 3];\n            a = a2;\n            b = b2;\n            c = c2;\n            k += 4;\n            // console.log(a, b, c, d);\n        }\n        // Last round.\n        for (var i = 0; i < 4; i++) {\n            out[i] = (S[a >>> 24] << 24\n                ^ S[(b >> 16) & 255] << 16\n                ^ S[(c >> 8) & 255] << 8\n                ^ S[d & 255]\n                ^ this.encKey[k++]);\n            a2 = a;\n            a = b;\n            b = c;\n            c = d;\n            d = a2;\n        }\n        return out;\n    };\n    AES.prototype.decrypt = function (_message) {\n        var message = getWords(_message);\n        var out = new Uint32Array(4);\n        var a = message[0] ^ this.decKey[0];\n        var b = message[3] ^ this.decKey[1];\n        var c = message[2] ^ this.decKey[2];\n        var d = message[1] ^ this.decKey[3];\n        var rounds = this.decKey.length / 4 - 2;\n        var a2;\n        var b2;\n        var c2;\n        var k = 4;\n        // Inner rounds.  Cribbed from OpenSSL.\n        for (var i = 0; i < rounds; i++) {\n            a2 = T5[a >>> 24] ^ T6[(b >> 16) & 255] ^ T7[(c >> 8) & 255] ^ T8[d & 255] ^ this.decKey[k];\n            b2 = T5[b >>> 24] ^ T6[(c >> 16) & 255] ^ T7[(d >> 8) & 255] ^ T8[a & 255] ^ this.decKey[k + 1];\n            c2 = T5[c >>> 24] ^ T6[(d >> 16) & 255] ^ T7[(a >> 8) & 255] ^ T8[b & 255] ^ this.decKey[k + 2];\n            d = T5[d >>> 24] ^ T6[(a >> 16) & 255] ^ T7[(b >> 8) & 255] ^ T8[c & 255] ^ this.decKey[k + 3];\n            a = a2;\n            b = b2;\n            c = c2;\n            k += 4;\n        }\n        // Last round.\n        for (var i = 0; i < 4; i++) {\n            out[3 & -i] = (Si[a >>> 24] << 24\n                ^ Si[(b >> 16) & 255] << 16\n                ^ Si[(c >> 8) & 255] << 8\n                ^ Si[d & 255]\n                ^ this.decKey[k++]);\n            a2 = a;\n            a = b;\n            b = c;\n            c = d;\n            d = a2;\n        }\n        return out;\n    };\n    return AES;\n}());\n\n/**\n * AES-IGE mode.\n */\nvar AES_IGE = /** @class */ (function () {\n    function AES_IGE(key, iv, blockSize) {\n        if (blockSize === void 0) { blockSize = 16; }\n        this.key = getWords(key);\n        this.iv = getWords(iv);\n        this.cipher = new AES(key);\n        this.blockSize = blockSize / 4;\n    }\n    /**\n     * Encrypts plain text with AES-IGE mode.\n     */\n    AES_IGE.prototype.encrypt = function (message, buf) {\n        var text = getWords(message);\n        var cipherText = buf || new Uint32Array(text.length);\n        var prevX = this.iv.subarray(this.blockSize, this.iv.length);\n        var prevY = this.iv.subarray(0, this.blockSize);\n        var yXOR = new Uint32Array(this.blockSize);\n        for (var i = 0; i < text.length; i += this.blockSize) {\n            var x = text.subarray(i, i + this.blockSize);\n            xor(x, prevY, yXOR);\n            var y = this.cipher.encrypt(yXOR);\n            xor(y, prevX);\n            prevX = x;\n            prevY = y;\n            for (var j = i, k = 0; j < text.length && k < 4; j++, k++)\n                cipherText[j] = y[k];\n        }\n        return cipherText;\n    };\n    /**\n     * Decrypts cipher text with AES-IGE mode.\n     */\n    AES_IGE.prototype.decrypt = function (message, buf) {\n        var cipherText = getWords(message);\n        var text = buf || new Uint32Array(cipherText.length);\n        var prevY = this.iv.subarray(this.blockSize, this.iv.length);\n        var prevX = this.iv.subarray(0, this.blockSize);\n        var yXOR = new Uint32Array(this.blockSize);\n        for (var i = 0; i < text.length; i += this.blockSize) {\n            var x = cipherText.subarray(i, i + this.blockSize);\n            xor(x, prevY, yXOR);\n            var y = this.cipher.decrypt(yXOR);\n            xor(y, prevX);\n            prevX = x;\n            prevY = y;\n            for (var j = i, k = 0; j < text.length && k < 4; j++, k++)\n                text[j] = y[k];\n        }\n        return text;\n    };\n    return AES_IGE;\n}());\n\n/**\n * AES-IGE mode.\n */\nvar AES_IGE$1 = /** @class */ (function () {\n    function AES_IGE(key, counter, blockSize) {\n        if (blockSize === void 0) { blockSize = 16; }\n        this.offset = 0;\n        this.key = getWords(key);\n        this.counter = getWords(counter);\n        this.cipher = new AES(key);\n        this.blockSize = blockSize / 4;\n        if (this.counter.length !== 4) {\n            throw new Error('AES-CTR mode counter must be 16 bytes length');\n        }\n    }\n    /**\n     * Encrypts plain text with AES-IGE mode.\n     */\n    AES_IGE.prototype.encrypt = function (message, buf) {\n        var text = getWords(message);\n        var cipherText = buf || new Uint32Array(text.length);\n        var offset = this.offset;\n        for (var i = 0; i < text.length; i += this.blockSize) {\n            var x = this.cipher.encrypt(this.counter);\n            for (var j = i, k = offset; j < text.length && k < this.blockSize; j++, k++)\n                cipherText[j] = x[k] ^ text[j];\n            if (text.length - i >= this.blockSize)\n                this.incrementCounter();\n            if (offset) {\n                i -= offset;\n                offset = 0;\n            }\n        }\n        this.offset = (this.offset + (text.length % 4)) % 4;\n        return cipherText;\n    };\n    /**\n     * Decrypts cipher text with AES-IGE mode.\n     */\n    AES_IGE.prototype.decrypt = function (message, buf) {\n        return this.encrypt(message, buf);\n    };\n    AES_IGE.prototype.incrementCounter = function () {\n        // increment counter\n        for (var carry = this.counter.length - 1; carry >= 0; carry--) {\n            if (++this.counter[carry] < 0xFFFFFFFF)\n                break; // If overflowing, it'll be 0 and we'll have to continue propagating the carry\n        }\n    };\n    return AES_IGE;\n}());\n\nexport default AES;\nexport { AES_IGE$1 as CTR, AES_IGE as IGE };\n","import convertToUint8Array from './convertToUint8Array';\n\nexport default function bytesToWordss(input: Parameters<typeof convertToUint8Array>[0]) {\n  const bytes = convertToUint8Array(input);\n\n  const words: number[] = [];\n  for(let i = 0, len = bytes.length; i < len; ++i) {\n    words[i >>> 2] |= bytes[i] << (24 - (i % 4) * 8);\n  }\n\n  return new Uint32Array(words);\n}\n","import {IGE} from '@cryptography/aes';\nimport addPadding from '../../../helpers/bytes/addPadding';\nimport bytesFromWordss from '../../../helpers/bytes/bytesFromWordss';\nimport bytesToWordss from '../../../helpers/bytes/bytesToWordss';\n\nexport default function aesSync(bytes: Uint8Array, keyBytes: Uint8Array, ivBytes: Uint8Array, encrypt = true) {\n  // console.log(dT(), 'AES start', bytes, keyBytes, ivBytes);\n\n  const cipher = new IGE(bytesToWordss(keyBytes), bytesToWordss(ivBytes));\n  const performedBytes = cipher[encrypt ? 'encrypt' : 'decrypt'](bytesToWordss(bytes));\n  // console.log(dT(), 'AES finish');\n\n  return bytesFromWordss(performedBytes);\n}\n\nexport function aesEncryptSync(bytes: Uint8Array, keyBytes: Uint8Array, ivBytes: Uint8Array) {\n  return aesSync(addPadding(bytes), keyBytes, ivBytes, true);\n}\n\nexport function aesDecryptSync(bytes: Uint8Array, keyBytes: Uint8Array, ivBytes: Uint8Array) {\n  return aesSync(bytes, keyBytes, ivBytes, false);\n}\n","export default function bytesFromWordss(input: Uint32Array) {\n  const o = new Uint8Array(input.byteLength);\n  for(let i = 0, length = input.length * 4; i < length; ++i) {\n    o[i] = ((input[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff);\n  }\n\n  return o;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nconst arrays = {\n  8: new Uint8Array(1),\n  16: new Uint16Array(1),\n  32: new Uint32Array(1)\n};\nexport function nextRandomUint(bits: 8 | 16 | 32) {\n  const array = arrays[bits];\n  crypto.getRandomValues(array);\n  return array[0];\n}\n\nexport function randomLong() {\n  return '' + nextRandomUint(32) + nextRandomUint(32) % 0xFFFFFF;\n}\n","import bigInt from 'big-integer';\nimport {nextRandomUint} from '../random';\n\nexport default function bigIntRandom(min: bigInt.BigNumber, max: bigInt.BigNumber) {\n  return bigInt.randBetween(min, max, () => {\n    return nextRandomUint(32) / 0xFFFFFFFF;\n    /* const bits = 32;\n    const randomBytes = new Uint8Array(bits / 8);\n    crypto.getRandomValues(randomBytes);\n    const r = bigIntFromBytes(randomBytes).mod(bigInt(2).pow(bits));\n    return r.toJSNumber(); */\n  });\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n// Thanks to https://xn--2-umb.com/09/12/brent-pollard-rho-factorisation/\n\nimport bigInt from 'big-integer';\nimport {bigIntFromBytes, bigIntToBytes} from '../../../../helpers/bigInt/bigIntConversion';\nimport bigIntRandom from '../../../../helpers/bigInt/bigIntRandom';\n\n// let test = 0;\nfunction BrentPollardFactor(n: bigInt.BigInteger) {\n  const two = bigInt[2];\n  if(n.remainder(two).isZero()) {\n    return two;\n  }\n\n  const m = bigInt(1000);\n  let a: bigInt.BigInteger,\n    x: bigInt.BigInteger,\n    y: bigInt.BigInteger,\n    ys: bigInt.BigInteger,\n    r: bigInt.BigInteger,\n    q: bigInt.BigInteger,\n    g: bigInt.BigInteger;\n  do\n    a = bigIntRandom(bigInt.one, n.minus(1));\n  while(a.isZero() || a.eq(n.minus(two)));\n  y = bigIntRandom(bigInt.one, n.minus(1));\n  r = bigInt.one;\n  q = bigInt.one;\n\n  // if(!test++) {\n  //   a = bigInt(3);\n  //   y = bigInt(3);\n  // }\n\n  const bigIntUint64 = bigInt('FFFFFFFFFFFFFFFF', 16);\n  const bigIntUint64MinusPqPlusOne = bigIntUint64.minus(n).plus(1);\n\n  const performY = (y: bigInt.BigInteger) => {\n    y = y.pow(two).mod(n);\n    y = y.add(a);\n    if(y.lesser(a)) { // it slows down the script\n      y = y.add(bigIntUint64MinusPqPlusOne);\n    }\n    y = y.mod(n);\n    return y;\n  };\n\n  do {\n    x = y;\n    for(let i = 0; bigInt(i).lesser(r); ++i) {\n      y = performY(y);\n    }\n\n    let k = bigInt.zero;\n    do {\n      ys = y;\n      const condition = bigInt.min(m, r.minus(k));\n      for(let i = 0; bigInt(i).lesser(condition); ++i) {\n        y = performY(y);\n        q = q.multiply(x.greater(y) ? x.minus(y) : y.minus(x)).mod(n);\n      }\n      g = bigInt.gcd(q, n);\n      k = k.add(m);\n    } while(k.lesser(r) && g.eq(bigInt.one));\n\n    r = r.shiftLeft(bigInt.one);\n  } while(g.eq(bigInt.one));\n\n  if(g.eq(n)) {\n    do {\n      ys = performY(ys);\n      g = bigInt.gcd(x.minus(ys).abs(), n);\n    } while(g.eq(bigInt.one));\n  }\n\n  return g;\n}\n\nfunction primeFactors(pqBytes: Uint8Array | number[]) {\n  const n = bigIntFromBytes(pqBytes);\n\n  const factors: bigInt.BigInteger[] = [];\n  const primes: bigInt.BigInteger[] = [];\n\n  let factor = BrentPollardFactor(n);\n  factors.push(n.divide(factor));\n  factors.push(factor);\n\n  // return [factor];\n\n  do {\n    const m = factors.pop();\n\n    if(m.eq(bigInt.one))\n      continue;\n\n    if(m.isPrime(true)) {\n      primes.push(m);\n\n      // Remove the prime from the other factors\n      for(let i = 0; i < factors.length; ++i) {\n        let k = factors[i];\n        if(k.mod(m).isZero()) {\n          do\n            k = k.divide(m);\n          while(k.mod(m).isZero());\n          factors[i] = k;\n        }\n      }\n    } else {\n      // factor = m.lesser(100) ? bigInt(PollardRho(m.toJSNumber())) : this.brentPollardFactor(m);\n      factor = BrentPollardFactor(m);\n      factors.push(m.divide(factor));\n      factors.push(factor);\n    }\n  } while(factors.length);\n\n  return primes;\n}\n\nexport default function factorizeBrentPollardPQ(pqBytes: Uint8Array | number[]): [Uint8Array, Uint8Array] {\n  let factors = primeFactors(pqBytes);\n  factors.sort((a, b) => a.compare(b));\n  if(factors.length > 2) {\n    factors = [\n      factors.splice(factors.length - 2, 1)[0],\n      factors.reduce((acc, v) => acc.multiply(v), bigInt.one)\n    ];\n  }\n\n  const p = factors[0], q = factors[factors.length - 1];\n  return (p.lesser(q) ? [p, q] : [q, p]).map((b) => bigIntToBytes(b)) as any;\n}\n","const subtle = typeof(window) !== 'undefined' && 'crypto' in window ? window.crypto.subtle : self.crypto.subtle;\n\nexport default subtle;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport {BigInteger} from 'big-integer';\r\nimport {bigIntFromBytes, bigIntToBytes} from '../../../helpers/bigInt/bigIntConversion';\r\nimport addPadding from '../../../helpers/bytes/addPadding';\r\nimport subtle from '../subtle';\r\n\r\nconst COUNTER_LENGTH = 16;\r\n\r\nexport default class CTR {\r\n  private cryptoKey: CryptoKey;\r\n  // private encLeft: Uint8Array;\r\n  private leftLength: number;\r\n  private mode: 'encrypt' | 'decrypt';\r\n  private counter: BigInteger;\r\n  private queue: {data: Uint8Array, resolve: (data: Uint8Array) => void}[];\r\n  private releasing: boolean;\r\n\r\n  constructor(mode: 'encrypt' | 'decrypt', cryptoKey: CryptoKey, counter: Uint8Array) {\r\n    this.mode = mode;\r\n    this.cryptoKey = cryptoKey;\r\n    this.queue = [];\r\n    this.counter = bigIntFromBytes(counter);\r\n  }\r\n\r\n  public async update(data: Uint8Array) {\r\n    return new Promise<Uint8Array>((resolve) => {\r\n      this.queue.push({data, resolve});\r\n      this.release();\r\n    });\r\n  }\r\n\r\n  private async release() {\r\n    if(this.releasing) {\r\n      return;\r\n    }\r\n\r\n    this.releasing = true;\r\n    while(this.queue.length) {\r\n      const {data, resolve} = this.queue.shift();\r\n      resolve(await this._update(data));\r\n    }\r\n    this.releasing = false;\r\n  }\r\n\r\n  private async perform(data: Uint8Array) {\r\n    const arrayBuffer: ArrayBuffer = await subtle[this.mode]({\r\n      name: 'AES-CTR',\r\n      counter: addPadding(bigIntToBytes(this.counter), COUNTER_LENGTH, true, true, true),\r\n      length: 128\r\n    },\r\n    this.cryptoKey,\r\n    data\r\n    );\r\n\r\n    return arrayBuffer;\r\n  }\r\n\r\n  private async _update(data: Uint8Array) {\r\n    let toEncrypt = data;\r\n    let head: Uint8Array/* , tail: Uint8Array */;\r\n    if(this.leftLength) {\r\n      // const leftLength = this.encLeft.byteLength;\r\n      const leftLength = this.leftLength;\r\n      const leftLength2 = COUNTER_LENGTH - leftLength;\r\n      // const left = this.encLeft.concat(toEncrypt.slice(0, leftLength2));\r\n      const left = (new Uint8Array(leftLength)).concat(toEncrypt.slice(0, leftLength2));\r\n\r\n      const performed = await this.perform(left);\r\n\r\n      head = new Uint8Array(performed.slice(leftLength));\r\n\r\n      toEncrypt = toEncrypt.slice(leftLength2);\r\n\r\n      this.counter = this.counter.add(1);\r\n    }\r\n\r\n    const tail = new Uint8Array(await this.perform(toEncrypt));\r\n\r\n    const result = head ? head.concat(tail) : tail;\r\n\r\n    let length = toEncrypt.length;\r\n    const leftAfter = length % COUNTER_LENGTH;\r\n    length -= leftAfter;\r\n\r\n    const a = length / COUNTER_LENGTH;\r\n    this.counter = this.counter.add(a);\r\n\r\n    this.leftLength = leftAfter || undefined;\r\n    // this.encLeft = leftAfter ? toEncrypt.slice(-leftAfter) : undefined;\r\n\r\n    return result;\r\n  }\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport CTR from './utils/aesCTR';\nimport subtle from './subtle';\n\nconst aesCTRs: Map<number, K> = new Map();\nlet lastCTRId = -1;\n\ntype K = {\n  enc: CTR,\n  dec: CTR,\n};\n\nexport async function aesCtrPrepare({encKey, encIv, decKey, decIv}: {[k in 'encKey' | 'encIv' | 'decKey' | 'decIv']: Uint8Array}) {\n  const id = ++lastCTRId;\n\n  const a = [['encrypt', encKey], ['decrypt', decKey]] as ['encrypt' | 'decrypt', Uint8Array][];\n  const promises = a.map(([mode, key]) => {\n    return subtle.importKey(\n      'raw',\n      key,\n      {name: 'AES-CTR'},\n      false,\n      [mode]\n    )\n  });\n\n  const [encCryptoKey, decCryptoKey] = await Promise.all(promises);\n  const enc = new CTR('encrypt', encCryptoKey, encIv.slice());\n  const dec = new CTR('decrypt', decCryptoKey, decIv.slice());\n\n  const k: K = {\n    enc,\n    dec\n  };\n\n  aesCTRs.set(id, k);\n\n  return id;\n}\n\nexport async function aesCtrProcess({id, data, operation}: {id: number, data: Uint8Array, operation: 'encrypt' | 'decrypt'}) {\n  const ctrs = aesCTRs.get(id);\n  const result = await (operation === 'encrypt' ? ctrs.enc : ctrs.dec).update(data);\n  return result;\n}\n\nexport function aesCtrDestroy(id: number) {\n  aesCTRs.delete(id);\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport '../polyfill'; // just to include\r\n\r\nimport bytesModPow from '../../helpers/bytes/bytesModPow';\r\nimport gzipUncompress from '../../helpers/gzipUncompress';\r\nimport listenMessagePort from '../../helpers/listenMessagePort';\r\nimport getEmojisFingerprint from '../calls/helpers/getEmojisFingerprint';\r\nimport computeDhKey from './computeDhKey';\r\nimport cryptoMessagePort from './cryptoMessagePort';\r\nimport {CryptoMethods} from './crypto_methods';\r\nimport generateDh from './generateDh';\r\nimport computeSRP from './srp';\r\nimport {aesEncryptSync, aesDecryptSync} from './utils/aesIGE';\r\nimport factorizeBrentPollardPQ from './utils/factorize/BrentPollard';\r\nimport pbkdf2 from './utils/pbkdf2';\r\nimport rsaEncrypt from './utils/rsa';\r\nimport sha1 from './utils/sha1';\r\nimport sha256 from './utils/sha256';\r\nimport {aesCtrDestroy, aesCtrPrepare, aesCtrProcess} from './aesCtrUtils';\r\nimport ctx from '../../environment/ctx';\r\n\r\nconsole.log('CryptoWorker start');\r\n\r\nconst cryptoMethods: CryptoMethods = {\r\n  'sha1': sha1,\r\n  'sha256': sha256,\r\n  'pbkdf2': pbkdf2,\r\n  'aes-encrypt': aesEncryptSync,\r\n  'aes-decrypt': aesDecryptSync,\r\n  'rsa-encrypt': rsaEncrypt,\r\n  'factorize': factorizeBrentPollardPQ,\r\n  // 'factorize-tdlib': factorizeTdlibPQ,\r\n  // 'factorize-new-new': pqPrimeLeemonNew,\r\n  'mod-pow': bytesModPow,\r\n  'gzipUncompress': gzipUncompress,\r\n  'computeSRP': computeSRP,\r\n  'generate-dh': generateDh,\r\n  'compute-dh-key': computeDhKey,\r\n  'get-emojis-fingerprint': getEmojisFingerprint,\r\n  'aes-ctr-prepare': aesCtrPrepare,\r\n  'aes-ctr-process': aesCtrProcess,\r\n  'aes-ctr-destroy': aesCtrDestroy\r\n};\r\n\r\ncryptoMessagePort.addMultipleEventsListeners({\r\n  invoke: ({method, args}) => {\r\n    // @ts-ignore\r\n    const result: any = cryptoMethods[method](...args);\r\n    return result;\r\n  },\r\n\r\n  terminate: () => {\r\n    ctx.close();\r\n  }\r\n});\r\n\r\nif(typeof(MessageChannel) !== 'undefined') listenMessagePort(cryptoMessagePort, (source) => {\r\n  const channel = new MessageChannel();\r\n  cryptoMessagePort.attachPort(channel.port1);\r\n  cryptoMessagePort.invokeVoid('port', undefined, source, [channel.port2]);\r\n});\r\n","import convertToUint8Array from '../../../helpers/bytes/convertToUint8Array';\nimport subtle from '../subtle';\n// import sha1 from '@cryptography/sha1';\n\nexport default function sha1(bytes: Parameters<typeof convertToUint8Array>[0]) {\n  return subtle.digest('SHA-1', convertToUint8Array(bytes)).then((b) => {\n    return new Uint8Array(b);\n  });\n  /* //console.trace(dT(), 'SHA-1 hash start', bytes);\n\n  const hashBytes: number[] = [];\n\n  let hash = sha1(String.fromCharCode.apply(null,\n    bytes instanceof Uint8Array ? [...bytes] : [...new Uint8Array(bytes)]));\n  for(let i = 0; i < hash.length; ++i) {\n    hashBytes.push(hash.charCodeAt(i));\n  }\n\n  //console.log(dT(), 'SHA-1 hash finish', hashBytes, bytesToHex(hashBytes));\n\n  return new Uint8Array(hashBytes); */\n}\n","import convertToUint8Array from '../../../helpers/bytes/convertToUint8Array';\nimport subtle from '../subtle';\n// import sha256 from '@cryptography/sha256';\n\nexport default function sha256(bytes: Parameters<typeof convertToUint8Array>[0]) {\n  return subtle.digest('SHA-256', convertToUint8Array(bytes)).then((b) => {\n    // console.log('legacy', performance.now() - perfS);\n    return new Uint8Array(b);\n  });\n  /* //console.log('SHA-256 hash start');\n\n  let perfS = performance.now();\n\n\n  let perfD = performance.now();\n  let words = typeof(bytes) === 'string' ? bytes : bytesToWordss(bytes as any);\n  let hash = sha256(words);\n  console.log('darutkin', performance.now() - perfD);\n\n  //console.log('SHA-256 hash finish', hash, sha256(words, 'hex'));\n\n  return bytesFromWordss(hash); */\n}\n","import subtle from '../subtle';\n\nexport default async function pbkdf2(buffer: Parameters<SubtleCrypto['importKey']>[1], salt: HkdfParams['salt'], iterations: number) {\n  const importKey = await subtle.importKey(\n    'raw',\n    buffer,\n    {name: 'PBKDF2'},\n    false,\n    [/* 'deriveKey',  */'deriveBits']\n  );\n\n  /* await subtle.deriveKey(\n    {\n      name: 'PBKDF2',\n      salt,\n      iterations,\n      hash: {name: 'SHA-512'}\n    },\n    importKey,\n    {\n      name: 'AES-CTR',\n      length: 256\n    },\n    false,\n    ['encrypt', 'decrypt']\n  ); */\n\n  const bits = subtle.deriveBits({\n    name: 'PBKDF2',\n    salt,\n    iterations,\n    hash: {name: 'SHA-512'}\n  },\n  importKey,\n  512\n  );\n\n  return bits.then((buffer) => new Uint8Array(buffer));\n}\n","import type {RSAPublicKeyHex} from '../../mtproto/rsaKeysManager';\nimport bytesModPow from '../../../helpers/bytes/bytesModPow';\nimport bytesFromHex from '../../../helpers/bytes/bytesFromHex';\n\nexport default function rsaEncrypt(bytes: Uint8Array, publicKey: RSAPublicKeyHex) {\n  return bytesModPow(bytes, bytesFromHex(publicKey.exponent), bytesFromHex(publicKey.modulus));\n}\n","// export function gzipUncompress(bytes: ArrayBuffer, toString: true): string;\n\n// @ts-ignore\nimport pako from 'pako/dist/pako_inflate.min.js';\n// import dT from './dT';\n\n// export function gzipUncompress(bytes: ArrayBuffer, toString?: false): Uint8Array;\nexport default function gzipUncompress(bytes: ArrayBuffer, toString?: boolean): string | Uint8Array {\n  // console.log(dT(), 'Gzip uncompress start');\n  const result = pako.inflate(bytes, toString ? {to: 'string'} : undefined);\n  // console.log(dT(), 'Gzip uncompress finish'/* , result */);\n  return result;\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport cryptoWorker from './cryptoMessagePort';\r\nimport {AccountPassword, InputCheckPasswordSRP, PasswordKdfAlgo} from '../../layer';\r\nimport addPadding from '../../helpers/bytes/addPadding';\r\nimport bufferConcats from '../../helpers/bytes/bufferConcats';\r\nimport bytesXor from '../../helpers/bytes/bytesXor';\r\nimport convertToUint8Array from '../../helpers/bytes/convertToUint8Array';\r\nimport bigInt from 'big-integer';\r\nimport {bigIntFromBytes, bigIntToBytes} from '../../helpers/bigInt/bigIntConversion';\r\nimport bytesToHex from '../../helpers/bytes/bytesToHex';\r\n\r\nexport async function makePasswordHash(password: string, client_salt: Uint8Array, server_salt: Uint8Array) {\r\n  // ! look into crypto_methods.test.ts\r\n  let buffer = await cryptoWorker.invokeCrypto('sha256', bufferConcats(client_salt, new TextEncoder().encode(password), client_salt));\r\n  buffer = bufferConcats(server_salt, buffer, server_salt);\r\n  buffer = await cryptoWorker.invokeCrypto('sha256', buffer);\r\n\r\n  let hash = await cryptoWorker.invokeCrypto('pbkdf2', new Uint8Array(buffer), client_salt, 100000);\r\n  hash = bufferConcats(server_salt, hash, server_salt);\r\n\r\n  buffer = await cryptoWorker.invokeCrypto('sha256', hash);\r\n\r\n  return buffer;\r\n}\r\n\r\nexport default async function computeSRP(password: string, state: AccountPassword, isNew: boolean) {\r\n  const algo = (isNew ? state.new_algo : state.current_algo) as PasswordKdfAlgo.passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow;\r\n\r\n  const p = bigIntFromBytes(algo.p);\r\n  const g = bigInt(algo.g);\r\n\r\n  /* if(B.compareTo(BigInteger.ZERO) < 0) {\r\n    console.error('srp_B < 0')\r\n  }\r\n\r\n  if(B.compareTo(p) <= 0) {\r\n    console.error('srp_B <= p');\r\n  } */\r\n\r\n  /* let check_prime_and_good = (bytes: any, g: number) => {\r\n    let good_prime = 'c71caeb9c6b1c9048e6c522f70f13f73980d40238e3e21c14934d037563d930f48198a0aa7c14058229493d22530f4dbfa336f6e0ac925139543aed44cce7c3720fd51f69458705ac68cd4fe6b6b13abdc9746512969328454f18faf8c595f642477fe96bb2a941d5bcd1d4ac8cc49880708fa9b378e3c4f3a9060bee67cf9a4a4a695811051907e162753b56b0f6b410dba74d8a84b2a14b3144e0ef1284754fd17ed950d5965b4b9dd46582db1178d169c6bc465b0d6ff9ca3928fef5b9ae4e418fc15e83ebea0f87fa9ff5eed70050ded2849f47bf959d956850ce929851f0d8115f635b105ee2e4e15d04b2454bf6f4fadf034b10403119cd8e3b92fcc5b';\r\n\r\n    if(bytesToHex(bytes) === good_prime && [3, 4, 5, 7].indexOf(g) !== -1) {\r\n      return true;\r\n    }\r\n\r\n    // TO-DO check_prime_and_good_check\r\n  }; */\r\n\r\n  // check_prime_and_good(algo.p, g);\r\n\r\n  const pw_hash = await makePasswordHash(password, algo.salt1, algo.salt2);\r\n  const x = bigInt(bytesToHex(pw_hash), 16);\r\n\r\n  const padArray = function(arr: number[] | Uint8Array, len: number) {\r\n    if(!(arr instanceof Uint8Array)) {\r\n      arr = convertToUint8Array(arr);\r\n    }\r\n\r\n    return addPadding(arr, len, true, true, true);\r\n  };\r\n\r\n  const v = g.modPow(x, p);\r\n\r\n  const flipper = (arr: Uint8Array | number[]) => {\r\n    const out = new Uint8Array(arr.length);\r\n    for(let i = 0; i < arr.length; i += 4) {\r\n      out[i] = arr[i + 3];\r\n      out[i + 1] = arr[i + 2];\r\n      out[i + 2] = arr[i + 1];\r\n      out[i + 3] = arr[i];\r\n    }\r\n\r\n    return out;\r\n  };\r\n\r\n  // * https://core.telegram.org/api/srp#setting-a-new-2fa-password\r\n  if(isNew) {\r\n    const bytes = bigIntToBytes(v);\r\n    return padArray(/* (isBigEndian ? bytes.reverse() : bytes) */bytes, 256);\r\n  }\r\n\r\n  const B = bigIntFromBytes(state.srp_B);\r\n\r\n  const pForHash = padArray(bigIntToBytes(p), 256);\r\n  const gForHash = padArray(bigIntToBytes(g), 256);\r\n  const b_for_hash = padArray(bigIntToBytes(B), 256);\r\n\r\n  const kHash = await cryptoWorker.invokeCrypto('sha256', bufferConcats(pForHash, gForHash));\r\n  const k = bigIntFromBytes(kHash);\r\n\r\n  const k_v = k.multiply(v).mod(p);\r\n\r\n  const is_good_mod_exp_first = (modexp: bigInt.BigInteger, prime: bigInt.BigInteger) => {\r\n    const diff = prime.subtract(modexp);\r\n    const min_diff_bits_count = 2048 - 64;\r\n    const max_mod_exp_size = 256;\r\n    if(diff.isNegative() ||\r\n      diff.bitLength().toJSNumber() < min_diff_bits_count ||\r\n      modexp.bitLength().toJSNumber() < min_diff_bits_count ||\r\n      Math.floor((modexp.bitLength().toJSNumber() + 7) / 8) > max_mod_exp_size)\r\n      return false;\r\n    return true;\r\n  };\r\n\r\n  const generate_and_check_random = async() => {\r\n    while(true) {\r\n      const a = bigIntFromBytes(flipper(state.secure_random));\r\n      // const a = str2bigInt('9153faef8f2bb6da91f6e5bc96bc00860a530a572a0f45aac0842b4602d711f8bda8d59fb53705e4ae3e31a3c4f0681955425f224297b8e9efd898fec22046debb7ba8a0bcf2be1ada7b100424ea318fdcef6ccfe6d7ab7d978c0eb76a807d4ab200eb767a22de0d828bc53f42c5a35c2df6e6ceeef9a3487aae8e9ef2271f2f6742e83b8211161fb1a0e037491ab2c2c73ad63c8bd1d739de1b523fe8d461270cedcf240de8da75f31be4933576532955041dc5770c18d3e75d0b357df9da4a5c8726d4fced87d15752400883dc57fa1937ac17608c5446c4774dcd123676d683ce3a1ab9f7e020ca52faafc99969822717c8e07ea383d5fb1a007ba0d170cb', 16);\r\n\r\n      const A = g.modPow(a, p);\r\n      if(is_good_mod_exp_first(A, p)) {\r\n        const a_for_hash = bigIntToBytes(A);\r\n\r\n        const s = await cryptoWorker.invokeCrypto('sha256', bufferConcats(a_for_hash, b_for_hash));\r\n        // const u = bigInt(s.hex, 16);\r\n        const u = bigIntFromBytes(s);\r\n        if(!u.isZero() && !u.isNegative())\r\n          return {a, a_for_hash, u};\r\n      }\r\n    }\r\n  }\r\n\r\n  const {a, a_for_hash, u} = await generate_and_check_random();\r\n\r\n  let g_b: bigInt.BigInteger;\r\n  if(!B.greater(k_v)) {\r\n    g_b = B.add(p);\r\n  } else g_b = B;\r\n  g_b = g_b.subtract(k_v).mod(p);\r\n\r\n  const ux = u.multiply(x);\r\n  const a_ux = a.add(ux);\r\n  const S = g_b.modPow(a_ux, p);\r\n\r\n  const K = await cryptoWorker.invokeCrypto('sha256', padArray(bigIntToBytes(S), 256));\r\n\r\n  let h1 = await cryptoWorker.invokeCrypto('sha256', pForHash);\r\n  const h2 = await cryptoWorker.invokeCrypto('sha256', gForHash);\r\n  h1 = bytesXor(h1, h2);\r\n\r\n  const buff = bufferConcats(\r\n    h1,\r\n    await cryptoWorker.invokeCrypto('sha256', algo.salt1),\r\n    await cryptoWorker.invokeCrypto('sha256', algo.salt2),\r\n    a_for_hash,\r\n    b_for_hash,\r\n    K\r\n  );\r\n\r\n  const M1 = await cryptoWorker.invokeCrypto('sha256', buff);\r\n\r\n  const out: InputCheckPasswordSRP.inputCheckPasswordSRP = {\r\n    _: 'inputCheckPasswordSRP',\r\n    srp_id: state.srp_id,\r\n    A: new Uint8Array(a_for_hash),\r\n    M1\r\n  };\r\n\r\n  return out;\r\n}\r\n","export default function bytesToHex(bytes: ArrayLike<number>) {\n  const length = bytes.length;\n  const arr: string[] = new Array(length);\n  for(let i = 0; i < length; ++i) {\n    arr[i] = (bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16);\n  }\n  return arr.join('');\n}\n","export default function bytesXor(bytes1: Uint8Array, bytes2: Uint8Array) {\n  const len = bytes1.length;\n  const bytes = new Uint8Array(len);\n\n  for(let i = 0; i < len; ++i) {\n    bytes[i] = bytes1[i] ^ bytes2[i];\n  }\n\n  return bytes;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport bigInt from 'big-integer';\nimport randomize from '../../helpers/array/randomize';\nimport {bigIntFromBytes} from '../../helpers/bigInt/bigIntConversion';\nimport addPadding from '../../helpers/bytes/addPadding';\nimport bytesFromHex from '../../helpers/bytes/bytesFromHex';\nimport {MessagesDhConfig} from '../../layer';\nimport CallInstance from '../calls/callInstance';\nimport cryptoWorker from './cryptoMessagePort';\n\nexport default async function generateDh(dhConfig: MessagesDhConfig.messagesDhConfig) {\n  const {p, g} = dhConfig;\n\n  const generateA = (p: Uint8Array) => {\n    for(;;) {\n      const a = randomize(new Uint8Array(p.length));\n      // const a = new Uint8Array(4).randomize();\n\n      const aBigInt = bigIntFromBytes(a); // str2bigInt(bytesToHex(a), 16);\n      if(!aBigInt.greater(bigInt.one)) {\n        continue;\n      }\n\n      const pBigInt = bigIntFromBytes(p); // str2bigInt(bytesToHex(p), 16);\n      if(!aBigInt.lesser(pBigInt.subtract(bigInt.one))) {\n        continue;\n      }\n\n      return a;\n    }\n  };\n\n  const a = generateA(p);\n  // const a = new Uint8Array([0]);\n\n  const gBytes = bytesFromHex(g.toString(16));\n  const g_a = addPadding(await cryptoWorker.invokeCrypto('mod-pow', gBytes, a, p), 256, true, true, true);\n  const g_a_hash = await cryptoWorker.invokeCrypto('sha256', g_a);\n\n  const dh: CallInstance['dh'] = {\n    a: a,\n    g_a: g_a,\n    g_a_hash: g_a_hash,\n    p\n  };\n\n  return dh;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport {bigIntFromBytes, bigIntToSigned} from '../../helpers/bigInt/bigIntConversion';\nimport cryptoWorker from './cryptoMessagePort';\n\nexport default async function computeDhKey(g_b: Uint8Array, a: Uint8Array, p: Uint8Array) {\n  const key = await cryptoWorker.invokeCrypto('mod-pow', g_b, a, p);\n  const keySha1Hashed = await cryptoWorker.invokeCrypto('sha1', key);\n  const key_fingerprint = keySha1Hashed.slice(-8).reverse();\n  const key_fingerprint_long = bigIntToSigned(bigIntFromBytes(key_fingerprint)).toString(10);\n\n  return {key, key_fingerprint: key_fingerprint_long};\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type SuperMessagePort from '../lib/mtproto/superMessagePort';\r\nimport ctx from '../environment/ctx';\r\n\r\nexport default function listenMessagePort(\r\n  messagePort: SuperMessagePort<any, any, any>,\r\n  onConnect?: (source: MessageEventSource) => void,\r\n  onDisconnect?: (source: MessageEventSource) => void\r\n) {\r\n  const attachPort = (listenPort: any, sendPort: any) => {\r\n    messagePort.attachListenPort(listenPort);\r\n    sendPort && messagePort.attachSendPort(sendPort);\r\n    onConnect?.(listenPort);\r\n  };\r\n\r\n  messagePort.setOnPortDisconnect(onDisconnect);\r\n\r\n  if(typeof(SharedWorkerGlobalScope) !== 'undefined') {\r\n    (ctx as any as SharedWorkerGlobalScope).addEventListener('connect', (e) => attachPort(e.source, e.source));\r\n  } else if(typeof(ServiceWorkerGlobalScope) !== 'undefined') {\r\n    attachPort(ctx, null);\r\n  } else {\r\n    attachPort(ctx, ctx);\r\n  }\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport DEBUG from '../config/debug';\nimport {IS_FIREFOX, IS_SAFARI} from '../environment/userAgent';\nimport {IS_SERVICE_WORKER, IS_WEB_WORKER} from '../helpers/context';\nimport dT from '../helpers/dT';\n\nexport enum LogTypes {\n  None = 0,\n  Error = 1,\n  Warn = 2,\n  Log = 4,\n  Debug = 8\n};\n\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\n\nconst IS_WEBKIT = IS_SAFARI || IS_FIREFOX;\n\n// let getCallerFunctionNameFromLine: (line: string) => string;\n// if(IS_WEBKIT) {\n//   getCallerFunctionNameFromLine = (line) => {\n//     const splitted = line.split('@');\n//     return splitted[0];\n//   };\n// } else {\n//   getCallerFunctionNameFromLine = (line: string) => {\n//     const splitted = line.trim().split(' ');\n//     if(splitted.length === 3) {\n//       return splitted[1].slice(splitted[1].lastIndexOf('.') + 1);\n//     }\n//   };\n// }\n\nconst STYLES_SUPPORTED = !IS_WEBKIT;\n// const LINE_INDEX = IS_WEBKIT ? 2 : 3;\n\n// function getCallerFunctionName() {\n//   const stack = new Error().stack;\n//   const lines = stack.split('\\n');\n//   const line = lines[LINE_INDEX] || lines[lines.length - 1];\n//   // const match = line.match(/\\.([^\\.]+?)\\s/);\n//   // line = match ? match[1] : line.trim();\n//   const caller = getCallerFunctionNameFromLine(line) || '<anonymous>';\n//   return '[' + caller + ']';\n// }\n\nexport const LOGGER_STYLES = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  dim: '\\x1b[2m',\n  underscore: '\\x1b[4m',\n  blink: '\\x1b[5m',\n  reverse: '\\x1b[7m',\n  hidden: '\\x1b[8m',\n  // Foreground (text) colors\n  fg: {\n    black: '\\x1b[30m',\n    red: '\\x1b[31m',\n    green: '\\x1b[32m',\n    yellow: '\\x1b[33m',\n    blue: '\\x1b[34m',\n    magenta: '\\x1b[35m',\n    cyan: '\\x1b[36m',\n    white: '\\x1b[37m'\n  },\n  // Background colors\n  bg: {\n    black: '\\x1b[40m',\n    red: '\\x1b[41m',\n    green: '\\x1b[42m',\n    yellow: '\\x1b[43m',\n    blue: '\\x1b[44m',\n    magenta: '\\x1b[45m',\n    cyan: '\\x1b[46m',\n    white: '\\x1b[47m'\n  }\n};\n\nexport type Logger = {\n  (...args: any[]): void;\n  warn(...args: any[]): void;\n  info(...args: any[]): void;\n  error(...args: any[]): void;\n  trace(...args: any[]): void;\n  debug(...args: any[]): void;\n  assert(...args: any[]): void;\n  // log(...args: any[]): void;\n  group(...args: any[]): void;\n  groupCollapsed(...args: any[]): void;\n  groupEnd(...args: any[]): void;\n  setPrefix(newPrefix: string): void;\n  setLevel(level: 0 | 1 | 2 | 3 | 4): void;\n  bindPrefix(prefix: string): Logger;\n};\n\nconst methods: ['debug' | 'info' | 'warn' | 'error' | 'assert' | 'trace'/*  | 'log' */ | 'group' | 'groupCollapsed' | 'groupEnd', LogTypes][] = [\n  ['debug', LogTypes.Debug],\n  ['info', LogTypes.Log],\n  ['warn', LogTypes.Warn],\n  ['error', LogTypes.Error],\n  ['assert', LogTypes.Error],\n  ['trace', LogTypes.Log],\n  ['group', LogTypes.Log],\n  ['groupCollapsed', LogTypes.Log],\n  ['groupEnd', LogTypes.Log]\n  // [\"log\", LogTypes.Log]\n];\n\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error, ignoreDebugReset = false, style = ''): Logger {\n  let originalPrefix: string;\n  if(!DEBUG && !ignoreDebugReset/*  || true */) {\n    type = LogTypes.Error;\n  }\n\n  if(!STYLES_SUPPORTED) {\n    style = '';\n  } else if(!style) {\n    if(IS_SERVICE_WORKER) style = LOGGER_STYLES.fg.yellow;\n    else if(IS_WEB_WORKER) style = LOGGER_STYLES.fg.cyan;\n  }\n\n  const originalStyle = style;\n  if(style) style = `%s ${style}%s`;\n  else style = '%s';\n\n  // level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\n\n  const log: Logger = function(...args: any[]) {\n    return type & LogTypes.Log && console.log(style, dT(), prefix, /* getCallerFunctionName(), */ ...args);\n  } as any;\n\n  methods.forEach(([method, logType]) => {\n    log[method] = function(...args: any[]) {\n      return type & logType && console[method](style, dT(), prefix, /* getCallerFunctionName(), */ ...args);\n    };\n  });\n\n  log.setPrefix = function(newPrefix: string) {\n    originalPrefix = newPrefix;\n    prefix = '[' + newPrefix + ']';\n  };\n\n  log.setPrefix(prefix);\n\n  log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\n  };\n\n  log.bindPrefix = function(prefix: string) {\n    return logger(`${originalPrefix}] [${prefix}`, type, ignoreDebugReset, originalStyle);\n  };\n\n  return log;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [699,211,437], () => (__webpack_require__(6991)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames not based on template\n\tif (chunkId === 437) return \"437.063bd44858e28568a483.bundle.js\";\n\t// return url for filenames based on template\n\treturn \"\" + {\"211\":\"npm.big-integer\",\"699\":\"npm.pako\"}[chunkId] + \".\" + {\"211\":\"a7ea0f3283af2967a6ae\",\"699\":\"f16d6f756c34f3914132\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t589: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = this[\"webpackChunktweb\"] = this[\"webpackChunktweb\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","oldGetScript","oldLoadScript","queryMap","countMap","next","USER_AGENT","navigator","userAgent","IS_SAFARI","search","toLowerCase","indexOf","test","vendor","platform","maxTouchPoints","match","IS_FIREFOX","IS_SERVICE_WORKER","ServiceWorkerGlobalScope","self","IS_WEB_WORKER","WorkerGlobalScope","IS_WORKER","postMessage","listener","args","err","console","error","notifyServiceWorker","all","clients","matchAll","includeUncontrolled","type","then","listeners","length","slice","forEach","bind","bufferConcats","reduce","acc","v","byteLength","tmp","Uint8Array","lastLength","b","set","ArrayBuffer","prototype","concat","this","toJSON","Promise","finally","fn","onFinally","callback","resolve","result","reason","reject","Number","MAX_SAFE_INTEGER","pow","longBigInt","divide","bigIntFromBytes","bytes","base","bigIntToBytes","bigInt","toArray","value","bytesModPow","exp","mod","bytesBigInt","expBigInt","modBigInt","modPow","CryptoMessagePort","constructor","super","lastIndex","invokeCryptoNew","method","transfer","payload","sendPortIndex","sendPorts","invoke","undefined","invokeCrypto","cryptoMessagePort","readBigIntFromBytesBE","bits","and","shiftLeft","i","_bits","or","emojis","randomize","arr","crypto","Error","getRandomValues","addPadding","blockSize","zeroes","blockSizeAsTotalLength","prepend","len","needPadding","padding","buffer","bytesFromHex","hexString","Math","ceil","start","parseInt","charAt","substr","convertToUint8Array","TextEncoder","encode","S","Si","T1","Uint32Array","T2","T3","T4","T5","T6","T7","T8","getWords","key","buf","pos","str","charCodeAt","xor","left","right","to","x2","x4","s","tEnc","tDec","d","t","x","xInv","computeTables","AES","_key","encKey","decKey","rcon","j","encrypt","_message","a2","b2","c2","message","out","a","c","rounds","k","decrypt","AES_IGE","iv","cipher","text","cipherText","prevX","subarray","prevY","yXOR","y","bytesToWordss","input","words","aesSync","keyBytes","ivBytes","o","bytesFromWordss","counter","offset","incrementCounter","carry","arrays","Uint16Array","bigIntRandom","min","max","array","nextRandomUint","BrentPollardFactor","n","two","remainder","isZero","m","ys","r","q","g","minus","eq","bigIntUint64MinusPqPlusOne","plus","performY","add","lesser","condition","multiply","greater","abs","window","subtle","CTR","mode","cryptoKey","queue","update","data","push","release","releasing","shift","_update","perform","name","head","toEncrypt","leftLength","leftLength2","performed","tail","leftAfter","aesCTRs","Map","lastCTRId","log","cryptoMethods","salt","iterations","importKey","hash","publicKey","exponent","modulus","pqBytes","factors","primes","factor","pop","isPrime","primeFactors","sort","compare","splice","p","map","toString","password","state","isNew","algo","new_algo","current_algo","pw_hash","client_salt","server_salt","makePasswordHash","salt1","salt2","Array","join","bytesToHex","padArray","flipper","B","srp_B","pForHash","gForHash","b_for_hash","k_v","is_good_mod_exp_first","modexp","prime","diff","subtract","isNegative","bitLength","toJSNumber","floor","a_for_hash","u","secure_random","A","generate_and_check_random","g_b","ux","a_ux","K","h1","bytes1","bytes2","bytesXor","buff","M1","_","srp_id","dhConfig","aBigInt","pBigInt","generateA","gBytes","g_a","g_a_hash","key_fingerprint","reverse","emojisLength","partOffset","index","codePoints","encIv","decIv","id","promises","encCryptoKey","decCryptoKey","enc","dec","operation","ctrs","get","delete","terminate","ctx","messagePort","onConnect","onDisconnect","attachPort","listenPort","sendPort","attachListenPort","attachSendPort","setOnPortDisconnect","listenMessagePort","e","source","channel","MessageChannel","port1","port2","LogTypes","LOG_LEVELS","None","Warn","Log","Debug","STYLES_SUPPORTED","LOGGER_STYLES","methods","logger","prefix","ignoreDebugReset","style","originalPrefix","originalStyle","logType","setPrefix","newPrefix","setLevel","level","bindPrefix","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","__webpack_exports__","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","Object","keys","every","getter","__esModule","definition","defineProperty","enumerable","f","chunkId","miniCssF","globalThis","Function","obj","prop","hasOwnProperty","nmd","paths","children","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","replace","has","catch","retries","realSrc","request","setTimeout","cacheBust","Date","now","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","moreModules","runtime"],"sourceRoot":""}