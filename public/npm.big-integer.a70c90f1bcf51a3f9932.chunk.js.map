{"version":3,"file":"npm.big-integer.a70c90f1bcf51a3f9932.chunk.js","mappings":"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","sources":["webpack://tweb/./node_modules/big-integer/BigInteger.js"],"sourcesContent":["var bigInt = (function (undefined) {\n    \"use strict\";\n\n    var BASE = 1e7,\n        LOG_BASE = 7,\n        MAX_INT = 9007199254740992,\n        MAX_INT_ARR = smallToArray(MAX_INT),\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\n    var supportsNativeBigInt = typeof BigInt === \"function\";\n\n    function Integer(v, radix, alphabet, caseSensitive) {\n        if (typeof v === \"undefined\") return Integer[0];\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\n        return parseValue(v);\n    }\n\n    function BigInteger(value, sign) {\n        this.value = value;\n        this.sign = sign;\n        this.isSmall = false;\n    }\n    BigInteger.prototype = Object.create(Integer.prototype);\n\n    function SmallInteger(value) {\n        this.value = value;\n        this.sign = value < 0;\n        this.isSmall = true;\n    }\n    SmallInteger.prototype = Object.create(Integer.prototype);\n\n    function NativeBigInt(value) {\n        this.value = value;\n    }\n    NativeBigInt.prototype = Object.create(Integer.prototype);\n\n    function isPrecise(n) {\n        return -MAX_INT < n && n < MAX_INT;\n    }\n\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\n        if (n < 1e7)\n            return [n];\n        if (n < 1e14)\n            return [n % 1e7, Math.floor(n / 1e7)];\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\n    }\n\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\n        trim(arr);\n        var length = arr.length;\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\n            switch (length) {\n                case 0: return 0;\n                case 1: return arr[0];\n                case 2: return arr[0] + arr[1] * BASE;\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\n            }\n        }\n        return arr;\n    }\n\n    function trim(v) {\n        var i = v.length;\n        while (v[--i] === 0);\n        v.length = i + 1;\n    }\n\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\n        var x = new Array(length);\n        var i = -1;\n        while (++i < length) {\n            x[i] = 0;\n        }\n        return x;\n    }\n\n    function truncate(n) {\n        if (n > 0) return Math.floor(n);\n        return Math.ceil(n);\n    }\n\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\n        var l_a = a.length,\n            l_b = b.length,\n            r = new Array(l_a),\n            carry = 0,\n            base = BASE,\n            sum, i;\n        for (i = 0; i < l_b; i++) {\n            sum = a[i] + b[i] + carry;\n            carry = sum >= base ? 1 : 0;\n            r[i] = sum - carry * base;\n        }\n        while (i < l_a) {\n            sum = a[i] + carry;\n            carry = sum === base ? 1 : 0;\n            r[i++] = sum - carry * base;\n        }\n        if (carry > 0) r.push(carry);\n        return r;\n    }\n\n    function addAny(a, b) {\n        if (a.length >= b.length) return add(a, b);\n        return add(b, a);\n    }\n\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\n        var l = a.length,\n            r = new Array(l),\n            base = BASE,\n            sum, i;\n        for (i = 0; i < l; i++) {\n            sum = a[i] - base + carry;\n            carry = Math.floor(sum / base);\n            r[i] = sum - carry * base;\n            carry += 1;\n        }\n        while (carry > 0) {\n            r[i++] = carry % base;\n            carry = Math.floor(carry / base);\n        }\n        return r;\n    }\n\n    BigInteger.prototype.add = function (v) {\n        var n = parseValue(v);\n        if (this.sign !== n.sign) {\n            return this.subtract(n.negate());\n        }\n        var a = this.value, b = n.value;\n        if (n.isSmall) {\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\n        }\n        return new BigInteger(addAny(a, b), this.sign);\n    };\n    BigInteger.prototype.plus = BigInteger.prototype.add;\n\n    SmallInteger.prototype.add = function (v) {\n        var n = parseValue(v);\n        var a = this.value;\n        if (a < 0 !== n.sign) {\n            return this.subtract(n.negate());\n        }\n        var b = n.value;\n        if (n.isSmall) {\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\n            b = smallToArray(Math.abs(b));\n        }\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\n    };\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\n\n    NativeBigInt.prototype.add = function (v) {\n        return new NativeBigInt(this.value + parseValue(v).value);\n    }\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\n\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\n        var a_l = a.length,\n            b_l = b.length,\n            r = new Array(a_l),\n            borrow = 0,\n            base = BASE,\n            i, difference;\n        for (i = 0; i < b_l; i++) {\n            difference = a[i] - borrow - b[i];\n            if (difference < 0) {\n                difference += base;\n                borrow = 1;\n            } else borrow = 0;\n            r[i] = difference;\n        }\n        for (i = b_l; i < a_l; i++) {\n            difference = a[i] - borrow;\n            if (difference < 0) difference += base;\n            else {\n                r[i++] = difference;\n                break;\n            }\n            r[i] = difference;\n        }\n        for (; i < a_l; i++) {\n            r[i] = a[i];\n        }\n        trim(r);\n        return r;\n    }\n\n    function subtractAny(a, b, sign) {\n        var value;\n        if (compareAbs(a, b) >= 0) {\n            value = subtract(a, b);\n        } else {\n            value = subtract(b, a);\n            sign = !sign;\n        }\n        value = arrayToSmall(value);\n        if (typeof value === \"number\") {\n            if (sign) value = -value;\n            return new SmallInteger(value);\n        }\n        return new BigInteger(value, sign);\n    }\n\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\n        var l = a.length,\n            r = new Array(l),\n            carry = -b,\n            base = BASE,\n            i, difference;\n        for (i = 0; i < l; i++) {\n            difference = a[i] + carry;\n            carry = Math.floor(difference / base);\n            difference %= base;\n            r[i] = difference < 0 ? difference + base : difference;\n        }\n        r = arrayToSmall(r);\n        if (typeof r === \"number\") {\n            if (sign) r = -r;\n            return new SmallInteger(r);\n        } return new BigInteger(r, sign);\n    }\n\n    BigInteger.prototype.subtract = function (v) {\n        var n = parseValue(v);\n        if (this.sign !== n.sign) {\n            return this.add(n.negate());\n        }\n        var a = this.value, b = n.value;\n        if (n.isSmall)\n            return subtractSmall(a, Math.abs(b), this.sign);\n        return subtractAny(a, b, this.sign);\n    };\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\n\n    SmallInteger.prototype.subtract = function (v) {\n        var n = parseValue(v);\n        var a = this.value;\n        if (a < 0 !== n.sign) {\n            return this.add(n.negate());\n        }\n        var b = n.value;\n        if (n.isSmall) {\n            return new SmallInteger(a - b);\n        }\n        return subtractSmall(b, Math.abs(a), a >= 0);\n    };\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\n\n    NativeBigInt.prototype.subtract = function (v) {\n        return new NativeBigInt(this.value - parseValue(v).value);\n    }\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\n\n    BigInteger.prototype.negate = function () {\n        return new BigInteger(this.value, !this.sign);\n    };\n    SmallInteger.prototype.negate = function () {\n        var sign = this.sign;\n        var small = new SmallInteger(-this.value);\n        small.sign = !sign;\n        return small;\n    };\n    NativeBigInt.prototype.negate = function () {\n        return new NativeBigInt(-this.value);\n    }\n\n    BigInteger.prototype.abs = function () {\n        return new BigInteger(this.value, false);\n    };\n    SmallInteger.prototype.abs = function () {\n        return new SmallInteger(Math.abs(this.value));\n    };\n    NativeBigInt.prototype.abs = function () {\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\n    }\n\n\n    function multiplyLong(a, b) {\n        var a_l = a.length,\n            b_l = b.length,\n            l = a_l + b_l,\n            r = createArray(l),\n            base = BASE,\n            product, carry, i, a_i, b_j;\n        for (i = 0; i < a_l; ++i) {\n            a_i = a[i];\n            for (var j = 0; j < b_l; ++j) {\n                b_j = b[j];\n                product = a_i * b_j + r[i + j];\n                carry = Math.floor(product / base);\n                r[i + j] = product - carry * base;\n                r[i + j + 1] += carry;\n            }\n        }\n        trim(r);\n        return r;\n    }\n\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\n        var l = a.length,\n            r = new Array(l),\n            base = BASE,\n            carry = 0,\n            product, i;\n        for (i = 0; i < l; i++) {\n            product = a[i] * b + carry;\n            carry = Math.floor(product / base);\n            r[i] = product - carry * base;\n        }\n        while (carry > 0) {\n            r[i++] = carry % base;\n            carry = Math.floor(carry / base);\n        }\n        return r;\n    }\n\n    function shiftLeft(x, n) {\n        var r = [];\n        while (n-- > 0) r.push(0);\n        return r.concat(x);\n    }\n\n    function multiplyKaratsuba(x, y) {\n        var n = Math.max(x.length, y.length);\n\n        if (n <= 30) return multiplyLong(x, y);\n        n = Math.ceil(n / 2);\n\n        var b = x.slice(n),\n            a = x.slice(0, n),\n            d = y.slice(n),\n            c = y.slice(0, n);\n\n        var ac = multiplyKaratsuba(a, c),\n            bd = multiplyKaratsuba(b, d),\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\n\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\n        trim(product);\n        return product;\n    }\n\n    // The following function is derived from a surface fit of a graph plotting the performance difference\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\n    function useKaratsuba(l1, l2) {\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\n    }\n\n    BigInteger.prototype.multiply = function (v) {\n        var n = parseValue(v),\n            a = this.value, b = n.value,\n            sign = this.sign !== n.sign,\n            abs;\n        if (n.isSmall) {\n            if (b === 0) return Integer[0];\n            if (b === 1) return this;\n            if (b === -1) return this.negate();\n            abs = Math.abs(b);\n            if (abs < BASE) {\n                return new BigInteger(multiplySmall(a, abs), sign);\n            }\n            b = smallToArray(abs);\n        }\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\n        return new BigInteger(multiplyLong(a, b), sign);\n    };\n\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\n\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\n        if (a < BASE) {\n            return new BigInteger(multiplySmall(b, a), sign);\n        }\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\n    }\n    SmallInteger.prototype._multiplyBySmall = function (a) {\n        if (isPrecise(a.value * this.value)) {\n            return new SmallInteger(a.value * this.value);\n        }\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\n    };\n    BigInteger.prototype._multiplyBySmall = function (a) {\n        if (a.value === 0) return Integer[0];\n        if (a.value === 1) return this;\n        if (a.value === -1) return this.negate();\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\n    };\n    SmallInteger.prototype.multiply = function (v) {\n        return parseValue(v)._multiplyBySmall(this);\n    };\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\n\n    NativeBigInt.prototype.multiply = function (v) {\n        return new NativeBigInt(this.value * parseValue(v).value);\n    }\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\n\n    function square(a) {\n        //console.assert(2 * BASE * BASE < MAX_INT);\n        var l = a.length,\n            r = createArray(l + l),\n            base = BASE,\n            product, carry, i, a_i, a_j;\n        for (i = 0; i < l; i++) {\n            a_i = a[i];\n            carry = 0 - a_i * a_i;\n            for (var j = i; j < l; j++) {\n                a_j = a[j];\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\n                carry = Math.floor(product / base);\n                r[i + j] = product - carry * base;\n            }\n            r[i + l] = carry;\n        }\n        trim(r);\n        return r;\n    }\n\n    BigInteger.prototype.square = function () {\n        return new BigInteger(square(this.value), false);\n    };\n\n    SmallInteger.prototype.square = function () {\n        var value = this.value * this.value;\n        if (isPrecise(value)) return new SmallInteger(value);\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\n    };\n\n    NativeBigInt.prototype.square = function (v) {\n        return new NativeBigInt(this.value * this.value);\n    }\n\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\n        var a_l = a.length,\n            b_l = b.length,\n            base = BASE,\n            result = createArray(b.length),\n            divisorMostSignificantDigit = b[b_l - 1],\n            // normalization\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\n            remainder = multiplySmall(a, lambda),\n            divisor = multiplySmall(b, lambda),\n            quotientDigit, shift, carry, borrow, i, l, q;\n        if (remainder.length <= a_l) remainder.push(0);\n        divisor.push(0);\n        divisorMostSignificantDigit = divisor[b_l - 1];\n        for (shift = a_l - b_l; shift >= 0; shift--) {\n            quotientDigit = base - 1;\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\n            }\n            // quotientDigit <= base - 1\n            carry = 0;\n            borrow = 0;\n            l = divisor.length;\n            for (i = 0; i < l; i++) {\n                carry += quotientDigit * divisor[i];\n                q = Math.floor(carry / base);\n                borrow += remainder[shift + i] - (carry - q * base);\n                carry = q;\n                if (borrow < 0) {\n                    remainder[shift + i] = borrow + base;\n                    borrow = -1;\n                } else {\n                    remainder[shift + i] = borrow;\n                    borrow = 0;\n                }\n            }\n            while (borrow !== 0) {\n                quotientDigit -= 1;\n                carry = 0;\n                for (i = 0; i < l; i++) {\n                    carry += remainder[shift + i] - base + divisor[i];\n                    if (carry < 0) {\n                        remainder[shift + i] = carry + base;\n                        carry = 0;\n                    } else {\n                        remainder[shift + i] = carry;\n                        carry = 1;\n                    }\n                }\n                borrow += carry;\n            }\n            result[shift] = quotientDigit;\n        }\n        // denormalization\n        remainder = divModSmall(remainder, lambda)[0];\n        return [arrayToSmall(result), arrayToSmall(remainder)];\n    }\n\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\n        // Performs faster than divMod1 on larger input sizes.\n        var a_l = a.length,\n            b_l = b.length,\n            result = [],\n            part = [],\n            base = BASE,\n            guess, xlen, highx, highy, check;\n        while (a_l) {\n            part.unshift(a[--a_l]);\n            trim(part);\n            if (compareAbs(part, b) < 0) {\n                result.push(0);\n                continue;\n            }\n            xlen = part.length;\n            highx = part[xlen - 1] * base + part[xlen - 2];\n            highy = b[b_l - 1] * base + b[b_l - 2];\n            if (xlen > b_l) {\n                highx = (highx + 1) * base;\n            }\n            guess = Math.ceil(highx / highy);\n            do {\n                check = multiplySmall(b, guess);\n                if (compareAbs(check, part) <= 0) break;\n                guess--;\n            } while (guess);\n            result.push(guess);\n            part = subtract(part, check);\n        }\n        result.reverse();\n        return [arrayToSmall(result), arrayToSmall(part)];\n    }\n\n    function divModSmall(value, lambda) {\n        var length = value.length,\n            quotient = createArray(length),\n            base = BASE,\n            i, q, remainder, divisor;\n        remainder = 0;\n        for (i = length - 1; i >= 0; --i) {\n            divisor = remainder * base + value[i];\n            q = truncate(divisor / lambda);\n            remainder = divisor - q * lambda;\n            quotient[i] = q | 0;\n        }\n        return [quotient, remainder | 0];\n    }\n\n    function divModAny(self, v) {\n        var value, n = parseValue(v);\n        if (supportsNativeBigInt) {\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\n        }\n        var a = self.value, b = n.value;\n        var quotient;\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\n        if (self.isSmall) {\n            if (n.isSmall) {\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\n            }\n            return [Integer[0], self];\n        }\n        if (n.isSmall) {\n            if (b === 1) return [self, Integer[0]];\n            if (b == -1) return [self.negate(), Integer[0]];\n            var abs = Math.abs(b);\n            if (abs < BASE) {\n                value = divModSmall(a, abs);\n                quotient = arrayToSmall(value[0]);\n                var remainder = value[1];\n                if (self.sign) remainder = -remainder;\n                if (typeof quotient === \"number\") {\n                    if (self.sign !== n.sign) quotient = -quotient;\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\n                }\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\n            }\n            b = smallToArray(abs);\n        }\n        var comparison = compareAbs(a, b);\n        if (comparison === -1) return [Integer[0], self];\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\n\n        // divMod1 is faster on smaller input sizes\n        if (a.length + b.length <= 200)\n            value = divMod1(a, b);\n        else value = divMod2(a, b);\n\n        quotient = value[0];\n        var qSign = self.sign !== n.sign,\n            mod = value[1],\n            mSign = self.sign;\n        if (typeof quotient === \"number\") {\n            if (qSign) quotient = -quotient;\n            quotient = new SmallInteger(quotient);\n        } else quotient = new BigInteger(quotient, qSign);\n        if (typeof mod === \"number\") {\n            if (mSign) mod = -mod;\n            mod = new SmallInteger(mod);\n        } else mod = new BigInteger(mod, mSign);\n        return [quotient, mod];\n    }\n\n    BigInteger.prototype.divmod = function (v) {\n        var result = divModAny(this, v);\n        return {\n            quotient: result[0],\n            remainder: result[1]\n        };\n    };\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\n\n\n    BigInteger.prototype.divide = function (v) {\n        return divModAny(this, v)[0];\n    };\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\n        return new NativeBigInt(this.value / parseValue(v).value);\n    };\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\n\n    BigInteger.prototype.mod = function (v) {\n        return divModAny(this, v)[1];\n    };\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\n        return new NativeBigInt(this.value % parseValue(v).value);\n    };\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\n\n    BigInteger.prototype.pow = function (v) {\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value,\n            value, x, y;\n        if (b === 0) return Integer[1];\n        if (a === 0) return Integer[0];\n        if (a === 1) return Integer[1];\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\n        if (n.sign) {\n            return Integer[0];\n        }\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\n        if (this.isSmall) {\n            if (isPrecise(value = Math.pow(a, b)))\n                return new SmallInteger(truncate(value));\n        }\n        x = this;\n        y = Integer[1];\n        while (true) {\n            if (b & 1 === 1) {\n                y = y.times(x);\n                --b;\n            }\n            if (b === 0) break;\n            b /= 2;\n            x = x.square();\n        }\n        return y;\n    };\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\n\n    NativeBigInt.prototype.pow = function (v) {\n        var n = parseValue(v);\n        var a = this.value, b = n.value;\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\n        if (b === _0) return Integer[1];\n        if (a === _0) return Integer[0];\n        if (a === _1) return Integer[1];\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\n        if (n.isNegative()) return new NativeBigInt(_0);\n        var x = this;\n        var y = Integer[1];\n        while (true) {\n            if ((b & _1) === _1) {\n                y = y.times(x);\n                --b;\n            }\n            if (b === _0) break;\n            b /= _2;\n            x = x.square();\n        }\n        return y;\n    }\n\n    BigInteger.prototype.modPow = function (exp, mod) {\n        exp = parseValue(exp);\n        mod = parseValue(mod);\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\n        var r = Integer[1],\n            base = this.mod(mod);\n        if (exp.isNegative()) {\n            exp = exp.multiply(Integer[-1]);\n            base = base.modInv(mod);\n        }\n        while (exp.isPositive()) {\n            if (base.isZero()) return Integer[0];\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\n            exp = exp.divide(2);\n            base = base.square().mod(mod);\n        }\n        return r;\n    };\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\n\n    function compareAbs(a, b) {\n        if (a.length !== b.length) {\n            return a.length > b.length ? 1 : -1;\n        }\n        for (var i = a.length - 1; i >= 0; i--) {\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\n        }\n        return 0;\n    }\n\n    BigInteger.prototype.compareAbs = function (v) {\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value;\n        if (n.isSmall) return 1;\n        return compareAbs(a, b);\n    };\n    SmallInteger.prototype.compareAbs = function (v) {\n        var n = parseValue(v),\n            a = Math.abs(this.value),\n            b = n.value;\n        if (n.isSmall) {\n            b = Math.abs(b);\n            return a === b ? 0 : a > b ? 1 : -1;\n        }\n        return -1;\n    };\n    NativeBigInt.prototype.compareAbs = function (v) {\n        var a = this.value;\n        var b = parseValue(v).value;\n        a = a >= 0 ? a : -a;\n        b = b >= 0 ? b : -b;\n        return a === b ? 0 : a > b ? 1 : -1;\n    }\n\n    BigInteger.prototype.compare = function (v) {\n        // See discussion about comparison with Infinity:\n        // https://github.com/peterolson/BigInteger.js/issues/61\n        if (v === Infinity) {\n            return -1;\n        }\n        if (v === -Infinity) {\n            return 1;\n        }\n\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value;\n        if (this.sign !== n.sign) {\n            return n.sign ? 1 : -1;\n        }\n        if (n.isSmall) {\n            return this.sign ? -1 : 1;\n        }\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\n    };\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\n\n    SmallInteger.prototype.compare = function (v) {\n        if (v === Infinity) {\n            return -1;\n        }\n        if (v === -Infinity) {\n            return 1;\n        }\n\n        var n = parseValue(v),\n            a = this.value,\n            b = n.value;\n        if (n.isSmall) {\n            return a == b ? 0 : a > b ? 1 : -1;\n        }\n        if (a < 0 !== n.sign) {\n            return a < 0 ? -1 : 1;\n        }\n        return a < 0 ? 1 : -1;\n    };\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\n\n    NativeBigInt.prototype.compare = function (v) {\n        if (v === Infinity) {\n            return -1;\n        }\n        if (v === -Infinity) {\n            return 1;\n        }\n        var a = this.value;\n        var b = parseValue(v).value;\n        return a === b ? 0 : a > b ? 1 : -1;\n    }\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\n\n    BigInteger.prototype.equals = function (v) {\n        return this.compare(v) === 0;\n    };\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\n\n    BigInteger.prototype.notEquals = function (v) {\n        return this.compare(v) !== 0;\n    };\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\n\n    BigInteger.prototype.greater = function (v) {\n        return this.compare(v) > 0;\n    };\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\n\n    BigInteger.prototype.lesser = function (v) {\n        return this.compare(v) < 0;\n    };\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\n\n    BigInteger.prototype.greaterOrEquals = function (v) {\n        return this.compare(v) >= 0;\n    };\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\n\n    BigInteger.prototype.lesserOrEquals = function (v) {\n        return this.compare(v) <= 0;\n    };\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\n\n    BigInteger.prototype.isEven = function () {\n        return (this.value[0] & 1) === 0;\n    };\n    SmallInteger.prototype.isEven = function () {\n        return (this.value & 1) === 0;\n    };\n    NativeBigInt.prototype.isEven = function () {\n        return (this.value & BigInt(1)) === BigInt(0);\n    }\n\n    BigInteger.prototype.isOdd = function () {\n        return (this.value[0] & 1) === 1;\n    };\n    SmallInteger.prototype.isOdd = function () {\n        return (this.value & 1) === 1;\n    };\n    NativeBigInt.prototype.isOdd = function () {\n        return (this.value & BigInt(1)) === BigInt(1);\n    }\n\n    BigInteger.prototype.isPositive = function () {\n        return !this.sign;\n    };\n    SmallInteger.prototype.isPositive = function () {\n        return this.value > 0;\n    };\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\n\n    BigInteger.prototype.isNegative = function () {\n        return this.sign;\n    };\n    SmallInteger.prototype.isNegative = function () {\n        return this.value < 0;\n    };\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\n\n    BigInteger.prototype.isUnit = function () {\n        return false;\n    };\n    SmallInteger.prototype.isUnit = function () {\n        return Math.abs(this.value) === 1;\n    };\n    NativeBigInt.prototype.isUnit = function () {\n        return this.abs().value === BigInt(1);\n    }\n\n    BigInteger.prototype.isZero = function () {\n        return false;\n    };\n    SmallInteger.prototype.isZero = function () {\n        return this.value === 0;\n    };\n    NativeBigInt.prototype.isZero = function () {\n        return this.value === BigInt(0);\n    }\n\n    BigInteger.prototype.isDivisibleBy = function (v) {\n        var n = parseValue(v);\n        if (n.isZero()) return false;\n        if (n.isUnit()) return true;\n        if (n.compareAbs(2) === 0) return this.isEven();\n        return this.mod(n).isZero();\n    };\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\n\n    function isBasicPrime(v) {\n        var n = v.abs();\n        if (n.isUnit()) return false;\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\n        if (n.lesser(49)) return true;\n        // we don't know if it's prime: let the other functions figure it out\n    }\n\n    function millerRabinTest(n, a) {\n        var nPrev = n.prev(),\n            b = nPrev,\n            r = 0,\n            d, t, i, x;\n        while (b.isEven()) b = b.divide(2), r++;\n        next: for (i = 0; i < a.length; i++) {\n            if (n.lesser(a[i])) continue;\n            x = bigInt(a[i]).modPow(b, n);\n            if (x.isUnit() || x.equals(nPrev)) continue;\n            for (d = r - 1; d != 0; d--) {\n                x = x.square().mod(n);\n                if (x.isUnit()) return false;\n                if (x.equals(nPrev)) continue next;\n            }\n            return false;\n        }\n        return true;\n    }\n\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\n    BigInteger.prototype.isPrime = function (strict) {\n        var isPrime = isBasicPrime(this);\n        if (isPrime !== undefined) return isPrime;\n        var n = this.abs();\n        var bits = n.bitLength();\n        if (bits <= 64)\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\n        var logN = Math.log(2) * bits.toJSNumber();\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\n        for (var a = [], i = 0; i < t; i++) {\n            a.push(bigInt(i + 2));\n        }\n        return millerRabinTest(n, a);\n    };\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\n\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\n        var isPrime = isBasicPrime(this);\n        if (isPrime !== undefined) return isPrime;\n        var n = this.abs();\n        var t = iterations === undefined ? 5 : iterations;\n        for (var a = [], i = 0; i < t; i++) {\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\n        }\n        return millerRabinTest(n, a);\n    };\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\n\n    BigInteger.prototype.modInv = function (n) {\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\n        while (!newR.isZero()) {\n            q = r.divide(newR);\n            lastT = t;\n            lastR = r;\n            t = newT;\n            r = newR;\n            newT = lastT.subtract(q.multiply(newT));\n            newR = lastR.subtract(q.multiply(newR));\n        }\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\n        if (t.compare(0) === -1) {\n            t = t.add(n);\n        }\n        if (this.isNegative()) {\n            return t.negate();\n        }\n        return t;\n    };\n\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\n\n    BigInteger.prototype.next = function () {\n        var value = this.value;\n        if (this.sign) {\n            return subtractSmall(value, 1, this.sign);\n        }\n        return new BigInteger(addSmall(value, 1), this.sign);\n    };\n    SmallInteger.prototype.next = function () {\n        var value = this.value;\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\n        return new BigInteger(MAX_INT_ARR, false);\n    };\n    NativeBigInt.prototype.next = function () {\n        return new NativeBigInt(this.value + BigInt(1));\n    }\n\n    BigInteger.prototype.prev = function () {\n        var value = this.value;\n        if (this.sign) {\n            return new BigInteger(addSmall(value, 1), true);\n        }\n        return subtractSmall(value, 1, this.sign);\n    };\n    SmallInteger.prototype.prev = function () {\n        var value = this.value;\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\n        return new BigInteger(MAX_INT_ARR, true);\n    };\n    NativeBigInt.prototype.prev = function () {\n        return new NativeBigInt(this.value - BigInt(1));\n    }\n\n    var powersOfTwo = [1];\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\n\n    function shift_isSmall(n) {\n        return Math.abs(n) <= BASE;\n    }\n\n    BigInteger.prototype.shiftLeft = function (v) {\n        var n = parseValue(v).toJSNumber();\n        if (!shift_isSmall(n)) {\n            throw new Error(String(n) + \" is too large for shifting.\");\n        }\n        if (n < 0) return this.shiftRight(-n);\n        var result = this;\n        if (result.isZero()) return result;\n        while (n >= powers2Length) {\n            result = result.multiply(highestPower2);\n            n -= powers2Length - 1;\n        }\n        return result.multiply(powersOfTwo[n]);\n    };\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\n\n    BigInteger.prototype.shiftRight = function (v) {\n        var remQuo;\n        var n = parseValue(v).toJSNumber();\n        if (!shift_isSmall(n)) {\n            throw new Error(String(n) + \" is too large for shifting.\");\n        }\n        if (n < 0) return this.shiftLeft(-n);\n        var result = this;\n        while (n >= powers2Length) {\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\n            remQuo = divModAny(result, highestPower2);\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n            n -= powers2Length - 1;\n        }\n        remQuo = divModAny(result, powersOfTwo[n]);\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n    };\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\n\n    function bitwise(x, y, fn) {\n        y = parseValue(y);\n        var xSign = x.isNegative(), ySign = y.isNegative();\n        var xRem = xSign ? x.not() : x,\n            yRem = ySign ? y.not() : y;\n        var xDigit = 0, yDigit = 0;\n        var xDivMod = null, yDivMod = null;\n        var result = [];\n        while (!xRem.isZero() || !yRem.isZero()) {\n            xDivMod = divModAny(xRem, highestPower2);\n            xDigit = xDivMod[1].toJSNumber();\n            if (xSign) {\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\n            }\n\n            yDivMod = divModAny(yRem, highestPower2);\n            yDigit = yDivMod[1].toJSNumber();\n            if (ySign) {\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\n            }\n\n            xRem = xDivMod[0];\n            yRem = yDivMod[0];\n            result.push(fn(xDigit, yDigit));\n        }\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\n        for (var i = result.length - 1; i >= 0; i -= 1) {\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\n        }\n        return sum;\n    }\n\n    BigInteger.prototype.not = function () {\n        return this.negate().prev();\n    };\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\n\n    BigInteger.prototype.and = function (n) {\n        return bitwise(this, n, function (a, b) { return a & b; });\n    };\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\n\n    BigInteger.prototype.or = function (n) {\n        return bitwise(this, n, function (a, b) { return a | b; });\n    };\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\n\n    BigInteger.prototype.xor = function (n) {\n        return bitwise(this, n, function (a, b) { return a ^ b; });\n    };\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\n\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\n    function roughLOB(n) { // get lowestOneBit (rough)\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\n        var v = n.value,\n            x = typeof v === \"number\" ? v | LOBMASK_I :\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\n                    v[0] + v[1] * BASE | LOBMASK_BI;\n        return x & -x;\n    }\n\n    function integerLogarithm(value, base) {\n        if (base.compareTo(value) <= 0) {\n            var tmp = integerLogarithm(value, base.square(base));\n            var p = tmp.p;\n            var e = tmp.e;\n            var t = p.multiply(base);\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\n        }\n        return { p: bigInt(1), e: 0 };\n    }\n\n    BigInteger.prototype.bitLength = function () {\n        var n = this;\n        if (n.compareTo(bigInt(0)) < 0) {\n            n = n.negate().subtract(bigInt(1));\n        }\n        if (n.compareTo(bigInt(0)) === 0) {\n            return bigInt(0);\n        }\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\n    }\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\n\n    function max(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        return a.greater(b) ? a : b;\n    }\n    function min(a, b) {\n        a = parseValue(a);\n        b = parseValue(b);\n        return a.lesser(b) ? a : b;\n    }\n    function gcd(a, b) {\n        a = parseValue(a).abs();\n        b = parseValue(b).abs();\n        if (a.equals(b)) return a;\n        if (a.isZero()) return b;\n        if (b.isZero()) return a;\n        var c = Integer[1], d, t;\n        while (a.isEven() && b.isEven()) {\n            d = min(roughLOB(a), roughLOB(b));\n            a = a.divide(d);\n            b = b.divide(d);\n            c = c.multiply(d);\n        }\n        while (a.isEven()) {\n            a = a.divide(roughLOB(a));\n        }\n        do {\n            while (b.isEven()) {\n                b = b.divide(roughLOB(b));\n            }\n            if (a.greater(b)) {\n                t = b; b = a; a = t;\n            }\n            b = b.subtract(a);\n        } while (!b.isZero());\n        return c.isUnit() ? a : a.multiply(c);\n    }\n    function lcm(a, b) {\n        a = parseValue(a).abs();\n        b = parseValue(b).abs();\n        return a.divide(gcd(a, b)).multiply(b);\n    }\n    function randBetween(a, b, rng) {\n        a = parseValue(a);\n        b = parseValue(b);\n        var usedRNG = rng || Math.random;\n        var low = min(a, b), high = max(a, b);\n        var range = high.subtract(low).add(1);\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\n        var digits = toBase(range, BASE).value;\n        var result = [], restricted = true;\n        for (var i = 0; i < digits.length; i++) {\n            var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;\n            var digit = truncate(usedRNG() * top);\n            result.push(digit);\n            if (digit < digits[i]) restricted = false;\n        }\n        return low.add(Integer.fromArray(result, BASE, false));\n    }\n\n    var parseBase = function (text, base, alphabet, caseSensitive) {\n        alphabet = alphabet || DEFAULT_ALPHABET;\n        text = String(text);\n        if (!caseSensitive) {\n            text = text.toLowerCase();\n            alphabet = alphabet.toLowerCase();\n        }\n        var length = text.length;\n        var i;\n        var absBase = Math.abs(base);\n        var alphabetValues = {};\n        for (i = 0; i < alphabet.length; i++) {\n            alphabetValues[alphabet[i]] = i;\n        }\n        for (i = 0; i < length; i++) {\n            var c = text[i];\n            if (c === \"-\") continue;\n            if (c in alphabetValues) {\n                if (alphabetValues[c] >= absBase) {\n                    if (c === \"1\" && absBase === 1) continue;\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n                }\n            }\n        }\n        base = parseValue(base);\n        var digits = [];\n        var isNegative = text[0] === \"-\";\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\n            var c = text[i];\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\n            else if (c === \"<\") {\n                var start = i;\n                do { i++; } while (text[i] !== \">\" && i < text.length);\n                digits.push(parseValue(text.slice(start + 1, i)));\n            }\n            else throw new Error(c + \" is not a valid character\");\n        }\n        return parseBaseFromArray(digits, base, isNegative);\n    };\n\n    function parseBaseFromArray(digits, base, isNegative) {\n        var val = Integer[0], pow = Integer[1], i;\n        for (i = digits.length - 1; i >= 0; i--) {\n            val = val.add(digits[i].times(pow));\n            pow = pow.times(base);\n        }\n        return isNegative ? val.negate() : val;\n    }\n\n    function stringify(digit, alphabet) {\n        alphabet = alphabet || DEFAULT_ALPHABET;\n        if (digit < alphabet.length) {\n            return alphabet[digit];\n        }\n        return \"<\" + digit + \">\";\n    }\n\n    function toBase(n, base) {\n        base = bigInt(base);\n        if (base.isZero()) {\n            if (n.isZero()) return { value: [0], isNegative: false };\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\n        }\n        if (base.equals(-1)) {\n            if (n.isZero()) return { value: [0], isNegative: false };\n            if (n.isNegative())\n                return {\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\n                        .map(Array.prototype.valueOf, [1, 0])\n                    ),\n                    isNegative: false\n                };\n\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\n                .map(Array.prototype.valueOf, [0, 1]);\n            arr.unshift([1]);\n            return {\n                value: [].concat.apply([], arr),\n                isNegative: false\n            };\n        }\n\n        var neg = false;\n        if (n.isNegative() && base.isPositive()) {\n            neg = true;\n            n = n.abs();\n        }\n        if (base.isUnit()) {\n            if (n.isZero()) return { value: [0], isNegative: false };\n\n            return {\n                value: Array.apply(null, Array(n.toJSNumber()))\n                    .map(Number.prototype.valueOf, 1),\n                isNegative: neg\n            };\n        }\n        var out = [];\n        var left = n, divmod;\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\n            divmod = left.divmod(base);\n            left = divmod.quotient;\n            var digit = divmod.remainder;\n            if (digit.isNegative()) {\n                digit = base.minus(digit).abs();\n                left = left.next();\n            }\n            out.push(digit.toJSNumber());\n        }\n        out.push(left.toJSNumber());\n        return { value: out.reverse(), isNegative: neg };\n    }\n\n    function toBaseString(n, base, alphabet) {\n        var arr = toBase(n, base);\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\n            return stringify(x, alphabet);\n        }).join('');\n    }\n\n    BigInteger.prototype.toArray = function (radix) {\n        return toBase(this, radix);\n    };\n\n    SmallInteger.prototype.toArray = function (radix) {\n        return toBase(this, radix);\n    };\n\n    NativeBigInt.prototype.toArray = function (radix) {\n        return toBase(this, radix);\n    };\n\n    BigInteger.prototype.toString = function (radix, alphabet) {\n        if (radix === undefined) radix = 10;\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\n        while (--l >= 0) {\n            digit = String(v[l]);\n            str += zeros.slice(digit.length) + digit;\n        }\n        var sign = this.sign ? \"-\" : \"\";\n        return sign + str;\n    };\n\n    SmallInteger.prototype.toString = function (radix, alphabet) {\n        if (radix === undefined) radix = 10;\n        if (radix != 10) return toBaseString(this, radix, alphabet);\n        return String(this.value);\n    };\n\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\n\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\n\n    BigInteger.prototype.valueOf = function () {\n        return parseInt(this.toString(), 10);\n    };\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\n\n    SmallInteger.prototype.valueOf = function () {\n        return this.value;\n    };\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\n        return parseInt(this.toString(), 10);\n    }\n\n    function parseStringValue(v) {\n        if (isPrecise(+v)) {\n            var x = +v;\n            if (x === truncate(x))\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\n            throw new Error(\"Invalid integer: \" + v);\n        }\n        var sign = v[0] === \"-\";\n        if (sign) v = v.slice(1);\n        var split = v.split(/e/i);\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\n        if (split.length === 2) {\n            var exp = split[1];\n            if (exp[0] === \"+\") exp = exp.slice(1);\n            exp = +exp;\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\n            var text = split[0];\n            var decimalPlace = text.indexOf(\".\");\n            if (decimalPlace >= 0) {\n                exp -= text.length - decimalPlace - 1;\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\n            }\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\n            text += (new Array(exp + 1)).join(\"0\");\n            v = text;\n        }\n        var isValid = /^([0-9][0-9]*)$/.test(v);\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\n        if (supportsNativeBigInt) {\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\n        }\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\n        while (max > 0) {\n            r.push(+v.slice(min, max));\n            min -= l;\n            if (min < 0) min = 0;\n            max -= l;\n        }\n        trim(r);\n        return new BigInteger(r, sign);\n    }\n\n    function parseNumberValue(v) {\n        if (supportsNativeBigInt) {\n            return new NativeBigInt(BigInt(v));\n        }\n        if (isPrecise(v)) {\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\n            return new SmallInteger(v);\n        }\n        return parseStringValue(v.toString());\n    }\n\n    function parseValue(v) {\n        if (typeof v === \"number\") {\n            return parseNumberValue(v);\n        }\n        if (typeof v === \"string\") {\n            return parseStringValue(v);\n        }\n        if (typeof v === \"bigint\") {\n            return new NativeBigInt(v);\n        }\n        return v;\n    }\n    // Pre-define numbers in range [-999,999]\n    for (var i = 0; i < 1000; i++) {\n        Integer[i] = parseValue(i);\n        if (i > 0) Integer[-i] = parseValue(-i);\n    }\n    // Backwards compatibility\n    Integer.one = Integer[1];\n    Integer.zero = Integer[0];\n    Integer.minusOne = Integer[-1];\n    Integer.max = max;\n    Integer.min = min;\n    Integer.gcd = gcd;\n    Integer.lcm = lcm;\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\n    Integer.randBetween = randBetween;\n\n    Integer.fromArray = function (digits, base, isNegative) {\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\n    };\n\n    return Integer;\n})();\n\n// Node.js check\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\n    module.exports = bigInt;\n}\n\n//amd check\nif (typeof define === \"function\" && define.amd) {\n    define( function () {\n        return bigInt;\n    });\n}\n"],"names":["BASE","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","BigInt","Integer","v","radix","alphabet","caseSensitive","parseValue","parseBase","BigInteger","value","sign","this","isSmall","SmallInteger","NativeBigInt","isPrecise","n","Math","floor","arrayToSmall","arr","trim","length","compareAbs","i","createArray","x","Array","truncate","ceil","add","a","b","sum","l_a","l_b","r","carry","base","push","addAny","addSmall","l","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","j","multiplySmall","shiftLeft","concat","multiplyKaratsuba","y","max","slice","d","c","ac","bd","abcd","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","Error","negate","abs","comparison","quotientDigit","shift","result","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","unshift","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","prototype","Object","create","plus","subtractAny","minus","small","multiply","l1","l2","times","_multiplyBySmall","divmod","over","pow","toString","_0","_1","_2","isNegative","exp","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","undefined","bits","bitLength","logN","log","toJSNumber","t","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","String","shiftRight","remQuo","and","or","xor","LOBMASK_I","roughLOB","integerLogarithm","tmp","p","e","min","gcd","text","toLowerCase","absBase","alphabetValues","digits","start","parseBaseFromArray","val","toBase","apply","map","valueOf","neg","Number","out","left","digit","toBaseString","stringify","join","parseStringValue","split","decimalPlace","indexOf","test","parseNumberValue","toArray","str","toJSON","parseInt","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","top","fromArray","module","hasOwnProperty","exports"],"sourceRoot":""}