{"version":3,"file":"810.4210f2cdaf4bf7c09d52.chunk.js","mappings":"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","sources":["webpack://tweb/./src/pages/pageSignIn.ts"],"sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport {putPreloader} from '../components/putPreloader';\r\nimport Scrollable from '../components/scrollable';\r\nimport Page from './page';\r\nimport InputField from '../components/inputField';\r\nimport CheckboxField from '../components/checkboxField';\r\nimport Button from '../components/button';\r\nimport fastSmoothScroll from '../helpers/fastSmoothScroll';\r\nimport IS_TOUCH_SUPPORTED from '../environment/touchSupport';\r\nimport App from '../config/app';\r\nimport I18n, {_i18n, i18n} from '../lib/langPack';\r\nimport lottieLoader from '../lib/rlottie/lottieLoader';\r\nimport ripple from '../components/ripple';\r\nimport findUpTag from '../helpers/dom/findUpTag';\r\nimport findUpClassName from '../helpers/dom/findUpClassName';\r\nimport {randomLong} from '../helpers/random';\r\nimport pageSignQR from './pageSignQR';\r\nimport getLanguageChangeButton from '../components/languageChangeButton';\r\nimport cancelEvent from '../helpers/dom/cancelEvent';\r\nimport {attachClickEvent} from '../helpers/dom/clickEvent';\r\nimport replaceContent from '../helpers/dom/replaceContent';\r\nimport toggleDisability from '../helpers/dom/toggleDisability';\r\nimport sessionStorage from '../lib/sessionStorage';\r\nimport {DcAuthKey} from '../types';\r\nimport placeCaretAtEnd from '../helpers/dom/placeCaretAtEnd';\r\nimport {HelpCountry, HelpCountryCode} from '../layer';\r\nimport {getCountryEmoji} from '../vendor/emoji';\r\nimport simulateEvent from '../helpers/dom/dispatchEvent';\r\nimport stateStorage from '../lib/stateStorage';\r\nimport rootScope from '../lib/rootScope';\r\nimport TelInputField from '../components/telInputField';\r\nimport IS_EMOJI_SUPPORTED from '../environment/emojiSupport';\r\nimport setInnerHTML from '../helpers/dom/setInnerHTML';\r\nimport wrapEmojiText from '../lib/richTextProcessor/wrapEmojiText';\r\nimport apiManagerProxy from '../lib/mtproto/mtprotoworker';\r\nimport CountryInputField from '../components/countryInputField';\r\n\r\n// import _countries from '../countries_pretty.json';\r\nlet btnNext: HTMLButtonElement = null, btnQr: HTMLButtonElement;\r\n\r\nconst onFirstMount = () => {\r\n  /* if(Modes.test) {\r\n    Countries.push({\r\n      _: 'help.country',\r\n      default_name: 'Test Country',\r\n      country_codes: [{\r\n        _: 'help.countryCode',\r\n        country_code: '999 66',\r\n        patterns: ['999 66 XXX XX']\r\n      }],\r\n      iso2: 'KK'\r\n    });\r\n\r\n    console.log('Added test country to list!');\r\n  } */\r\n\r\n  // const countries: Country[] = _countries.default.filter((c) => c.emoji);\r\n  // const countries: Country[] = Countries.filter((c) => c.emoji).sort((a, b) => a.name.localeCompare(b.name));\r\n  // const countries = I18n.countriesList.filter((country) => !country.pFlags?.hidden);\r\n\r\n  const inputWrapper = document.createElement('div');\r\n  inputWrapper.classList.add('input-wrapper');\r\n\r\n  let lastCountrySelected: HelpCountry, lastCountryCodeSelected: HelpCountryCode;\r\n  const countryInputField = new CountryInputField({\r\n    onCountryChange: (country, code) => {\r\n      lastCountrySelected = country, lastCountryCodeSelected = code;\r\n\r\n      if(!code) {\r\n        return;\r\n      }\r\n\r\n      telInputField.value = telInputField.lastValue = '+' + code.country_code;\r\n      setTimeout(() => {\r\n        telEl.focus();\r\n        placeCaretAtEnd(telEl, true);\r\n      }, 0);\r\n    }\r\n  });\r\n\r\n  const telInputField = new TelInputField({\r\n    onInput: (formatted) => {\r\n      lottieLoader.loadLottieWorkers();\r\n\r\n      const {country, code} = formatted || {};\r\n      const countryName = country ? country.name || country.default_name : ''/* 'Unknown' */;\r\n      if(countryName !== countryInputField.value && (\r\n        !lastCountrySelected ||\r\n          !country ||\r\n          !code || (\r\n          lastCountrySelected !== country &&\r\n            lastCountryCodeSelected.country_code !== code.country_code\r\n        )\r\n      )\r\n      ) {\r\n        countryInputField.override(country, code, countryName);\r\n      }\r\n\r\n      // if(country && (telInputField.value.length - 1) >= (country.pattern ? country.pattern.length : 9)) {\r\n      if(country || (telInputField.value.length - 1) > 1) {\r\n        btnNext.style.visibility = '';\r\n      } else {\r\n        btnNext.style.visibility = 'hidden';\r\n      }\r\n    }\r\n  });\r\n\r\n  const telEl = telInputField.input;\r\n\r\n  telEl.addEventListener('keypress', (e) => {\r\n    // console.log('keypress', this.value);\r\n    if(!btnNext.style.visibility &&/* this.value.length >= 9 && */ e.key === 'Enter') {\r\n      return onSubmit();\r\n    }\r\n  });\r\n\r\n  /* telEl.addEventListener('focus', function(this: typeof telEl, e) {\r\n    this.removeAttribute('readonly'); // fix autocomplete\r\n  });*/\r\n\r\n  const signedCheckboxField = new CheckboxField({\r\n    text: 'Login.KeepSigned',\r\n    name: 'keepSession',\r\n    withRipple: true,\r\n    checked: true\r\n  });\r\n\r\n  signedCheckboxField.input.addEventListener('change', () => {\r\n    const keepSigned = signedCheckboxField.checked;\r\n    rootScope.managers.appStateManager.pushToState('keepSigned', keepSigned);\r\n\r\n    apiManagerProxy.toggleStorages(keepSigned, true);\r\n  });\r\n\r\n  apiManagerProxy.getState().then((state) => {\r\n    if(!stateStorage.isAvailable()) {\r\n      signedCheckboxField.checked = false;\r\n      signedCheckboxField.label.classList.add('checkbox-disabled');\r\n    } else {\r\n      signedCheckboxField.checked = state.keepSigned;\r\n    }\r\n  });\r\n\r\n  btnNext = Button('btn-primary btn-color-primary', {text: 'Login.Next'});\r\n  btnNext.style.visibility = 'hidden';\r\n\r\n  const onSubmit = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    const toggle = toggleDisability([/* telEl, countryInput,  */btnNext, btnQr], true);\r\n\r\n    replaceContent(btnNext, i18n('PleaseWait'));\r\n    putPreloader(btnNext);\r\n\r\n    // return;\r\n\r\n    const phone_number = telInputField.value;\r\n    rootScope.managers.apiManager.invokeApi('auth.sendCode', {\r\n      phone_number: phone_number,\r\n      api_id: App.id,\r\n      api_hash: App.hash,\r\n      settings: {\r\n        _: 'codeSettings' // that's how we sending Type\r\n      }\r\n      // lang_code: navigator.language || 'en'\r\n    }).then((code) => {\r\n      // console.log('got code', code);\r\n\r\n      import('./pageAuthCode').then((m) => m.default.mount(Object.assign(code, {phone_number: phone_number})));\r\n    }).catch((err) => {\r\n      toggle();\r\n\r\n      switch(err.type) {\r\n        case 'PHONE_NUMBER_INVALID':\r\n          telInputField.setError();\r\n          replaceContent(telInputField.label, i18n('Login.PhoneLabelInvalid'));\r\n          telEl.classList.add('error');\r\n          replaceContent(btnNext, i18n('Login.Next'));\r\n          break;\r\n        default:\r\n          console.error('auth.sendCode error:', err);\r\n          btnNext.innerText = err.type;\r\n          break;\r\n      }\r\n    });\r\n  };\r\n\r\n  attachClickEvent(btnNext, onSubmit);\r\n\r\n  btnQr = Button('btn-primary btn-secondary btn-primary-transparent primary', {text: 'Login.QR.Login'});\r\n\r\n  const qrMounted = false;\r\n  btnQr.addEventListener('click', () => {\r\n    pageSignQR.mount();\r\n    /* const promise = import('./pageSignQR');\r\n    btnQr.disabled = true;\r\n\r\n    let preloaderDiv: HTMLElement;\r\n    if(!qrMounted) {\r\n      preloaderDiv = putPreloader(btnQr);\r\n      qrMounted = true;\r\n    }\r\n\r\n    promise.then((module) => {\r\n      module.default.mount();\r\n\r\n      setTimeout(() => {\r\n        btnQr.removeAttribute('disabled');\r\n        if(preloaderDiv) {\r\n          preloaderDiv.remove();\r\n        }\r\n      }, 200);\r\n    }); */\r\n  });\r\n\r\n  inputWrapper.append(countryInputField.container, telInputField.container, signedCheckboxField.label, btnNext, btnQr);\r\n\r\n  const h4 = document.createElement('h4');\r\n  h4.classList.add('text-center');\r\n  _i18n(h4, 'Login.Title');\r\n\r\n  const subtitle = document.createElement('div');\r\n  subtitle.classList.add('subtitle', 'text-center');\r\n  _i18n(subtitle, 'Login.StartText');\r\n\r\n  page.pageEl.querySelector('.container').append(h4, subtitle, inputWrapper);\r\n\r\n  const tryAgain = () => {\r\n    rootScope.managers.apiManager.invokeApi('help.getNearestDc').then((nearestDcResult) => {\r\n      const langPack = stateStorage.getFromCache('langPack');\r\n      if(langPack && !langPack.countries?.hash) {\r\n        I18n.getLangPack(langPack.lang_code).then(() => {\r\n          simulateEvent(telEl, 'input');\r\n        });\r\n      }\r\n\r\n      const dcs = new Set([1, 2, 3, 4, 5]);\r\n      const done: number[] = [nearestDcResult.this_dc];\r\n\r\n      let promise: Promise<any>;\r\n      if(nearestDcResult.nearest_dc !== nearestDcResult.this_dc) {\r\n        promise = rootScope.managers.apiManager.getNetworkerVoid(nearestDcResult.nearest_dc).then(() => {\r\n          done.push(nearestDcResult.nearest_dc);\r\n        });\r\n      }\r\n\r\n      (promise || Promise.resolve()).then(() => {\r\n        done.forEach((dcId) => {\r\n          dcs.delete(dcId);\r\n        });\r\n\r\n        const _dcs = [...dcs];\r\n        const g = async(): Promise<void> => {\r\n          const dcId = _dcs.shift();\r\n          if(!dcId) return;\r\n\r\n          const dbKey: DcAuthKey = `dc${dcId}_auth_key` as any;\r\n          const key = await sessionStorage.get(dbKey);\r\n          if(key) {\r\n            return g();\r\n          }\r\n\r\n          setTimeout(() => { // * если одновременно запросить все нетворкеры, не будет проходить запрос на код\r\n            rootScope.managers.apiManager.getNetworkerVoid(dcId/* , {fileDownload: true} */).finally(g);\r\n          }, /* done.includes(dcId) ? 0 :  */3000);\r\n        };\r\n\r\n        g();\r\n      });\r\n\r\n      return nearestDcResult;\r\n    }).then((nearestDcResult) => {\r\n      if(!countryInputField.value.length && !telInputField.value.length) {\r\n        countryInputField.selectCountryByIso2(nearestDcResult.country);\r\n      }\r\n\r\n      // console.log('woohoo', nearestDcResult, country);\r\n    })// .catch(tryAgain);\r\n  };\r\n\r\n  if(!IS_TOUCH_SUPPORTED) {\r\n    setTimeout(() => {\r\n      telEl.focus();\r\n    }, 0);\r\n  }\r\n\r\n  getLanguageChangeButton(inputWrapper);\r\n\r\n  tryAgain();\r\n};\r\n\r\nconst page = new Page('page-sign', true, onFirstMount, () => {\r\n  if(btnNext) {\r\n    replaceContent(btnNext, i18n('Login.Next'));\r\n    ripple(btnNext, undefined, undefined, true);\r\n    btnNext.removeAttribute('disabled');\r\n  }\r\n\r\n  if(btnQr) {\r\n    btnQr.removeAttribute('disabled');\r\n  }\r\n\r\n  rootScope.managers.appStateManager.pushToState('authState', {_: 'authStateSignIn'});\r\n});\r\n\r\nexport default page;\r\n"],"names":["btnQr","btnNext","page","inputWrapper","document","createElement","lastCountrySelected","lastCountryCodeSelected","classList","add","countryInputField","onCountryChange","country","code","telInputField","value","lastValue","country_code","setTimeout","telEl","focus","onInput","formatted","countryName","name","default_name","override","length","style","visibility","input","addEventListener","e","key","onSubmit","signedCheckboxField","text","withRipple","checked","keepSigned","then","state","label","toggle","phone_number","api_id","api_hash","settings","_","m","default","mount","Object","assign","catch","err","type","setError","console","error","innerText","append","container","h4","subtitle","pageEl","querySelector","nearestDcResult","langPack","countries","hash","lang_code","dcs","Set","done","this_dc","promise","nearest_dc","push","Promise","resolve","forEach","dcId","delete","_dcs","g","shift","dbKey","finally","selectCountryByIso2","undefined","removeAttribute"],"sourceRoot":""}